"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
"""
import asyncio
import aiohttp
from typing import Dict, Optional
from datetime import datetime, timedelta
import json
from app.keyboards import tr
# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
_currency_cache = {}
_cache_expires = None
CACHE_DURATION = 300  # 5 –º–∏–Ω—É—Ç


class CurrencyService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç"""

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API
    BASE_URL = "https://api.exchangerate-api.com/v4/latest/USD"

    @staticmethod
    async def get_exchange_rates() -> Optional[Dict[str, float]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UZS
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞: {"USD": 12000.0, "EUR": 11000.0, "RUB": 165.0}
        """
        global _currency_cache, _cache_expires

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if _cache_expires and datetime.now() < _cache_expires and _currency_cache:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
            return _currency_cache.copy()

        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(10)) as session:
                print("üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")

                async with session.get(CurrencyService.BASE_URL) as response:
                    if response.status == 200:
                        data = await response.json()

                        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ USD
                        usd_rates = data.get("rates", {})
                        uzs_per_usd = usd_rates.get("UZS", 12450.0)
                        eur_per_usd = usd_rates.get("EUR", 0.85)
                        rub_per_usd = usd_rates.get("RUB", 90.0)

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤ UZS (—Å–∫–æ–ª—å–∫–æ UZS –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã)
                        rates = {
                            "UZS": 1.0,  # –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
                            "USD": round(uzs_per_usd, 2),  # —Å–∫–æ–ª—å–∫–æ UZS –∑–∞ 1 USD
                            "EUR": round(uzs_per_usd / eur_per_usd, 2),  # —Å–∫–æ–ª—å–∫–æ UZS –∑–∞ 1 EUR
                            "RUB": round(uzs_per_usd / rub_per_usd, 2)  # —Å–∫–æ–ª—å–∫–æ UZS –∑–∞ 1 RUB
                        }

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                        _currency_cache = rates
                        _cache_expires = datetime.now() + timedelta(seconds=CACHE_DURATION)

                        print(f"‚úÖ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: USD={rates['USD']}, EUR={rates['EUR']}, RUB={rates['RUB']} UZS")
                        return rates

                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}")
                        return CurrencyService._get_fallback_rates()

        except asyncio.TimeoutError:
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
            return CurrencyService._get_fallback_rates()

        except aiohttp.ClientError as e:
            print(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
            return CurrencyService._get_fallback_rates()

        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
            return CurrencyService._get_fallback_rates()

    @staticmethod
    def _get_fallback_rates() -> Dict[str, float]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        fallback_rates = {
            "UZS": 1.0,
            "USD": 12000.0,
            "EUR": 11000.0,
            "RUB": 165.0
        }

        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        global _currency_cache, _cache_expires
        _currency_cache = fallback_rates
        _cache_expires = datetime.now() + timedelta(seconds=60)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É

        return fallback_rates

    @staticmethod
    async def format_currency_message(user_id: int, tr_func) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            rates = await CurrencyService.get_exchange_rates()

            if not rates:
                return await tr_func(user_id, 'currency_error')

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_parts = [f"{await tr(user_id, 'currency_rates')}:"]

            # USD –∫ UZS
            if "USD" in rates:
                usd_rate = rates["USD"]
                message_parts.append(f"üá∫üá∏ USD: {usd_rate:.0f} UZS")

            # EUR –∫ UZS
            if "EUR" in rates:
                eur_rate = rates["EUR"]
                message_parts.append(f"üá™üá∫ EUR: {eur_rate:.0f} UZS")

            # RUB –∫ UZS
            if "RUB" in rates:
                rub_rate = rates["RUB"]
                message_parts.append(f"üá∑üá∫ RUB: {rub_rate:.0f} UZS")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            current_time = datetime.now().strftime("%H:%M")
            message_parts.append(f"\n{await tr(user_id, 'updated')} {current_time}")

            return "\n".join(message_parts)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö: {e}")
            return await tr_func(user_id, 'currency_format_error')

    @staticmethod
    async def convert_currency(amount: float, from_currency: str, to_currency: str) -> Optional[float]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é
        """
        try:
            rates = await CurrencyService.get_exchange_rates()

            if not rates or from_currency not in rates or to_currency not in rates:
                return None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ UZS –∫–∞–∫ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
            uzs_amount = amount * rates[from_currency]
            result = uzs_amount / rates[to_currency]

            return round(result, 2)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç: {e}")
            return None

    @staticmethod
    def clear_cache():
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        global _currency_cache, _cache_expires
        _currency_cache = {}
        _cache_expires = None
        print("üóëÔ∏è –ö—ç—à –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—á–∏—â–µ–Ω")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

async def get_currency_rates() -> Optional[Dict[str, float]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (–∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å)"""
    return await CurrencyService.get_exchange_rates()


async def format_currency_notification(user_id: int, tr_func) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç"""
    return await CurrencyService.format_currency_message(user_id, tr_func)


async def convert_amount(amount: float, from_curr: str, to_curr: str) -> Optional[float]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å)"""
    return await CurrencyService.convert_currency(amount, from_curr, to_curr)


async def convert_currency(direction: str, amount: float):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∏–¥–∞ 'uzs_usd', 'usd_eur' –∏ —Ç.–¥.
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏.
    """
    try:
        from_curr, to_curr = direction.split("_")
        return await CurrencyService.convert_currency(amount, from_curr.upper(), to_curr.upper())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ convert_currency: {e}")
        return None