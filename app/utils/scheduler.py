"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio


class ReminderScheduler:
    def __init__(self):
        self.scheduler = AsyncIOScheduler(timezone='Asia/Tashkent')
        self.bot = None
        self.started = False
        self.running = False

    def set_bot(self, bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.started:
            self.scheduler.start()
            self.started = True
            self.running = True
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.started:
            self.scheduler.shutdown()
            self.started = False
            self.running = False
            print("üî¥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def send_due_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–∞—Ö"""
        if not self.bot:
            print("‚ùå Bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ scheduler")
            return

        try:
            from app.database import get_due_debts_for_reminders, get_user_data
            from app.keyboards import tr, safe_str

            print("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–∏–≤–∞—é—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            due_debts = await get_due_debts_for_reminders(today)

            if not due_debts:
                print("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç")
                return

            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(due_debts)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–ª–≥–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_debts = {}
            for debt in due_debts:
                user_id = debt['user_id']
                if user_id not in user_debts:
                    user_debts[user_id] = []
                user_debts[user_id].append(debt)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for user_id, debts in user_debts.items():
                try:
                    await self._send_user_reminder(user_id, debts)
                    print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_due_reminders: {e}")


    async def send_daily_reminders(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if not self.bot:
            print("‚ùå Bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ scheduler")
            return

        try:
            from app.database import get_open_debts
            from app.keyboards import tr, safe_str
            from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

            debts = await get_open_debts(user_id)

            if not debts:
                return

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç (–≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π)
            today = datetime.now().date()
            upcoming_debts = []

            for debt in debts:
                try:
                    due_date = datetime.strptime(debt['due'], '%Y-%m-%d').date()
                    days_left = (due_date - today).days

                    if days_left <= 3:  # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –∑–∞ 3 –¥–Ω—è –∏ –º–µ–Ω–µ–µ
                        upcoming_debts.append((debt, days_left))
                except:
                    continue

            if not upcoming_debts:
                return

            message_lines = [await tr(user_id, 'daily_reminder_header')]

            for debt, days_left in upcoming_debts:
                direction = debt.get('direction', 'owed')

                if days_left < 0:
                    status_text = await tr(user_id, 'overdue', days=abs(days_left))
                elif days_left == 0:
                    status_text = await tr(user_id, 'due_today')
                else:
                    status_text = await tr(user_id, 'due_in_days', days=days_left)

                if direction == 'owed':  # –ú–Ω–µ –¥–æ–ª–∂–Ω—ã
                    person_text = await tr(user_id, 'debtor_name', person=debt['person'])
                else:  # –Ø –¥–æ–ª–∂–µ–Ω
                    person_text = await tr(user_id, 'creditor_name', person=debt['person'])

                message_lines.append(
                    f"‚Ä¢ {person_text}: {debt['amount']} {debt.get('currency', 'UZS')}\n"
                    f"  {status_text}"
                )

            message_text = '\n\n'.join(message_lines)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 403
            try:
                await self.bot.send_message(user_id, message_text)
                print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except TelegramForbiddenError:
                print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - —É–¥–∞–ª—è–µ–º –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            except TelegramBadRequest as e:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            except Exception as e:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _send_user_reminder(self, user_id: int, debts: list):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            from app.keyboards import tr, main_menu, safe_str
            from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

            if len(debts) == 1:
                debt = debts[0]
                text = await tr(user_id, 'single_reminder',
                                person=safe_str(debt['person']),
                                amount=safe_str(debt['amount']),
                                currency=safe_str(debt.get('currency', 'UZS')),
                                due=safe_str(debt['due']))
            else:
                text = await tr(user_id, 'multiple_reminders', count=len(debts))
                for debt in debts:
                    text += f"\n‚Ä¢ {safe_str(debt['person'])}: {safe_str(debt['amount'])} {safe_str(debt.get('currency', 'UZS'))}"

            try:
                kb = await main_menu(user_id)
                await self.bot.send_message(user_id, text, reply_markup=kb)
            except TelegramForbiddenError:
                print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            except TelegramBadRequest as e:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            except Exception as e:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")



    async def schedule_all_reminders(self):
        """
        –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            from app.database import get_all_users

            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            for job in self.scheduler.get_jobs():
                if job.id.startswith('user_reminder_'):
                    job.remove()

            print("üîÑ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await get_all_users()

            scheduled_count = 0
            for user in users:
                user_id = user['user_id']
                notify_time = user.get('notify_time')

                if not notify_time:
                    continue

                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    hour, minute = map(int, notify_time.split(':'))

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.scheduler.add_job(
                        self.send_daily_reminders,
                        'cron',
                        hour=hour,
                        minute=minute,
                        id=f'user_reminder_{user_id}',
                        args=[user_id],
                        replace_existing=True
                    )

                    scheduled_count += 1

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            # –¢–∞–∫–∂–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å


            print(f"‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {scheduled_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_all_reminders: {e}")

    async def send_broadcast_to_all_users(self, text: str, photo_id: str = None, admin_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.bot:
            return 0, 0, []

        try:
            from app.database import get_all_users

            users = await get_all_users()
            success_count = 0
            error_count = 0
            blocked_users = []

            for user in users:
                user_id = user['user_id']
                try:
                    if photo_id:
                        await self.bot.send_photo(user_id, photo_id, caption=text)
                    else:
                        await self.bot.send_message(user_id, text)
                    success_count += 1
                except Exception as e:
                    error_count += 1
                    blocked_users.append(user_id)
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.05)

            return success_count, error_count, blocked_users

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_broadcast_to_all_users: {e}")
            return 0, 0, []

    async def send_scheduled_broadcast_with_stats(self, text: str, photo_id: str = None, admin_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        success, errors, blocked = await self.send_broadcast_to_all_users(text, photo_id, admin_id)

        if admin_id:
            try:
                stats_text = f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {errors}"
                await self.bot.send_message(admin_id, stats_text)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    def add_job(self, *args, **kwargs):
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è add_job"""
        return self.scheduler.add_job(*args, **kwargs)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = ReminderScheduler()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
async def schedule_all_reminders():
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    """
    await scheduler.schedule_all_reminders()