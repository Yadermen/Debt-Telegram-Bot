"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio
import traceback
import calendar
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter
from app.database.models import Reminder
from app.database.crud import (
    get_due_reminders,
    get_due_repeating_reminders,
    update_reminder_due,
    delete_reminder
)
from app.keyboards import main_menu


class ReminderScheduler:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.bot = None
        self.started = False
        self.running = False
        print("üîß ReminderScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def set_bot(self, bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot
        print(f"ü§ñ –ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ scheduler: {bot is not None}")

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.started:
            self.scheduler.start()
            self.started = True
            self.running = True
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.started:
            self.scheduler.shutdown()
            self.started = False
            self.running = False
            print("üî¥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def send_due_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–∞—Ö"""
        print("\n" + "="*50)
        print("üìÖ –ó–ê–ü–£–°–ö: send_due_reminders")
        print("="*50)

        if not self.bot:
            print("‚ùå Bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ scheduler")
            return

        try:
            from app.database import get_due_debts_for_reminders, get_user_data
            from app.keyboards import tr, safe_str

            today = datetime.now().strftime('%Y-%m-%d')
            print(f"üìÜ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {today}")

            due_debts = await get_due_debts_for_reminders(today)
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ª–≥–æ–≤ –∏–∑ –ë–î: {len(due_debts)}")

            if not due_debts:
                print("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç")
                return

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–ª–≥–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_debts = {}
            for debt in due_debts:
                user_id = debt['user_id']
                if user_id not in user_debts:
                    user_debts[user_id] = []
                user_debts[user_id].append(debt)

            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–ª–≥–∞–º–∏: {len(user_debts)}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for user_id, debts in user_debts.items():
                try:
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({len(debts)} –¥–æ–ª–≥–æ–≤)")
                    await self._send_user_reminder(user_id, debts)
                    print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    traceback.print_exc()

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_due_reminders: {e}")
            traceback.print_exc()
        finally:
            print("="*50 + "\n")

    async def send_daily_reminders(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        print("\n" + "="*50)
        print(f"üìÖ –ó–ê–ü–£–°–ö: send_daily_reminders –¥–ª—è user_id={user_id}")
        print("="*50)

        if not self.bot:
            print("‚ùå Bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ scheduler")
            return

        try:
            from app.database import get_open_debts
            from app.keyboards import tr, safe_str

            debts = await get_open_debts(user_id)
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–ª–≥–æ–≤: {len(debts)}")

            if not debts:
                print("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–ª–≥–æ–≤")
                return

            today = datetime.now().date()
            upcoming_debts = []

            for debt in debts:
                try:
                    due_date = datetime.strptime(debt['due'], '%Y-%m-%d').date()
                    days_left = (due_date - today).days

                    if days_left <= 3:
                        upcoming_debts.append((debt, days_left))
                        print(f"  ‚è∞ –î–æ–ª–≥ '{debt['person']}': –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–≥–∞: {e}")
                    continue

            print(f"üìä –î–æ–ª–≥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(upcoming_debts)}")

            if not upcoming_debts:
                print("‚ÑπÔ∏è –ù–µ—Ç –¥–æ–ª–≥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_lines = [await tr(user_id, 'daily_reminder_header')]

            for debt, days_left in upcoming_debts:
                direction = debt.get('direction', 'owed')

                if days_left < 0:
                    status_text = await tr(user_id, 'overdue', days=abs(days_left))
                elif days_left == 0:
                    status_text = await tr(user_id, 'due_today')
                else:
                    status_text = await tr(user_id, 'due_in_days', days=days_left)

                if direction == 'owed':
                    person_text = await tr(user_id, 'debtor_name', person=debt['person'])
                else:
                    person_text = await tr(user_id, 'creditor_name', person=debt['person'])

                message_lines.append(
                    f"‚Ä¢ {person_text}: {debt['amount']} {debt.get('currency', 'UZS')}\n"
                    f"  {status_text}"
                )

            message_text = '\n\n'.join(message_lines)

            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await self.bot.send_message(user_id, message_text)
            print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            traceback.print_exc()
        finally:
            print("="*50 + "\n")

    async def _send_user_reminder(self, user_id: int, debts: list):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            from app.keyboards import tr, main_menu, safe_str

            if len(debts) == 1:
                debt = debts[0]
                text = await tr(
                    user_id,
                    'single_reminder',
                    person=safe_str(debt['person']),
                    amount=safe_str(debt['amount']),
                    currency=safe_str(debt.get('currency', 'UZS')),
                    due=safe_str(debt['due'])
                )
            else:
                text = await tr(user_id, 'multiple_reminders', count=len(debts))
                for debt in debts:
                    text += f"\n‚Ä¢ {safe_str(debt['person'])}: {safe_str(debt['amount'])} {safe_str(debt.get('currency', 'UZS'))}"

            kb = await main_menu(user_id)

            # –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await self.bot.send_message(user_id, text, reply_markup=kb)

        except TelegramBadRequest as e:
            if "chat not found" in str(e):
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (chat not found)")
            else:
                print(f"‚ùå BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except TelegramForbiddenError:
            print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

        except TelegramRetryAfter as e:
            print(f"‚è≥ Flood control –¥–ª—è {user_id}, –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            # –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
            return await self._send_user_reminder(user_id, debts)

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            traceback.print_exc()

    async def schedule_all_reminders(self):
        """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\n" + "="*70)
        print("üîÑ –ó–ê–ü–£–°–ö: schedule_all_reminders")
        print("="*70)

        try:
            from app.database import get_all_users

            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
            existing_jobs = self.scheduler.get_jobs()
            print(f"üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π: {len(existing_jobs)}")

            removed_count = 0
            for job in existing_jobs:
                if job.id.startswith(('user_reminder_', 'user_currency_', 'general_reminders_', 'repeating_reminders')):
                    print(f"  üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É: {job.id}")
                    job.remove()
                    removed_count += 1

            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {removed_count}")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await get_all_users()
            print(f"üë• –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {len(users)}")

            debt_reminders_count = 0
            currency_reminders_count = 0

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for user in users:
                user_id = user['user_id']


                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–ª–≥–∞—Ö
                notify_time = user.get('notify_time')


                if notify_time:
                    try:
                        hour, minute = map(int, notify_time.split(':'))

                        self.scheduler.add_job(
                            self.send_daily_reminders,
                            'cron',
                            hour=hour,
                            minute=minute,
                            timezone='Asia/Tashkent',  # ‚Üê –ò –¢–£–¢
                            id=f'user_reminder_{user_id}',
                            args=[user_id],
                            replace_existing=True
                        )
                        debt_reminders_count += 1


                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–æ–ª–≥–∞—Ö: {e}")
                        traceback.print_exc()

                # –í–∞–ª—é—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                currency_time = user.get('currency_notify_time')


                if currency_time:
                    try:
                        hour, minute = map(int, currency_time.split(':'))
                        print(f"  ‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–ª—é—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ {hour:02d}:{minute:02d}")

                        self.scheduler.add_job(
                            self.send_currency_alerts,
                            'cron',
                            hour=hour,
                            minute=minute,
                            timezone='Asia/Tashkent',  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
                            id=f'user_currency_{user_id}',
                            args=[user_id],
                            replace_existing=True
                        )
                        currency_reminders_count += 1
                        print(f"  ‚úÖ –í–∞–ª—é—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")

                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                        traceback.print_exc()

            # –ì–õ–û–ë–ê–õ–¨–ù–´–ï –∑–∞–¥–∞—á–∏
            print("\nüåê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:")

            print("  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ general_reminders_global")
            self.scheduler.add_job(
                self.send_general_reminders,
                'interval',
                minutes=1,
                timezone='Asia/Tashkent',
                id='general_reminders_global',
                replace_existing=True
            )

            print("  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ repeating_reminders_global")
            self.scheduler.add_job(
                self.send_repeating_reminders,
                'interval',
                minutes=1,
                timezone='Asia/Tashkent',
                id='repeating_reminders_global',
                replace_existing=True
            )

            print("  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ due_reminders")
            self.scheduler.add_job(
                self.send_due_reminders,
                'cron',
                hour='*',
                timezone='Asia/Tashkent',
                id='due_reminders',
                replace_existing=True
            )

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            all_jobs = self.scheduler.get_jobs()
            print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–æ–ª–≥–∞—Ö: {debt_reminders_count}")
            print(f"   ‚úÖ –í–∞–ª—é—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {currency_reminders_count}")
            print(f"   ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: 3")
            print(f"   üìã –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(all_jobs)}")



        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ schedule_all_reminders: {e}")
            traceback.print_exc()
        finally:
            print("="*70 + "\n")

    async def send_broadcast_to_all_users(self, text: str, photo_id: str = None, admin_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.bot:
            return 0, 0, []

        try:
            from app.database import get_all_users

            users = await get_all_users()
            success_count = 0
            error_count = 0
            blocked_users = []

            for user in users:
                user_id = user['user_id']
                try:
                    if photo_id:
                        await self.bot.send_photo(user_id, photo_id, caption=text)
                    else:
                        await self.bot.send_message(user_id, text)
                    success_count += 1
                except Exception as e:
                    error_count += 1
                    blocked_users.append(user_id)
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                await asyncio.sleep(0.05)

            return success_count, error_count, blocked_users

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_broadcast_to_all_users: {e}")
            return 0, 0, []

    async def send_scheduled_broadcast_with_stats(self, text: str, photo_id: str = None, admin_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        success, errors, blocked = await self.send_broadcast_to_all_users(text, photo_id, admin_id)

        if admin_id:
            try:
                stats_text = f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {errors}"
                await self.bot.send_message(admin_id, stats_text)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    def add_job(self, *args, **kwargs):
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è add_job"""
        return self.scheduler.add_job(*args, **kwargs)

    async def send_general_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("\n" + "=" * 50)
        print("‚è∞ –ó–ê–ü–£–°–ö: send_general_reminders")
        print("=" * 50)

        if not self.bot:
            print("‚ùå Bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ scheduler")
            return

        try:
            from app.database.crud import update_reminder
            from app.database.connection import AsyncSessionLocal  # üëà –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

            now = datetime.now().replace(second=0, microsecond=0)
            print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")

            reminders = await get_due_reminders(now)
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î: {len(reminders)}")

            if not reminders:
                print("‚ÑπÔ∏è –ù–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return

            for idx, r in enumerate(reminders, 1):
                print(f"\nüìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {idx}/{len(reminders)}:")
                print(f"   ID: {r['id']}")
                print(f"   user_id: {r['user_id']}")
                print(f"   text: {r['text']}")
                print(f"   due: {r['due']}")
                print(f"   is_active: {r.get('is_active', 'N/A')}")

                try:
                    # üëá –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    async with AsyncSessionLocal() as session:
                        print(f"   ‚è≥ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
                        updated = await update_reminder(session, r['id'], is_active=False)
                        print(f"   {'‚úÖ' if updated else '‚ùå'} –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è: {updated}")

                    text = f"‚è∞ {r['text']}\nüïí {r['due']}"
                    print(f"   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r['user_id']}")
                    await self.bot.send_message(r['user_id'], text)
                    print(f"   ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                    traceback.print_exc()

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_general_reminders: {e}")
            traceback.print_exc()
        finally:
            print("=" * 50 + "\n")

    async def send_currency_alerts(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        print("\n" + "=" * 50)
        print(f"üí± –ó–ê–ü–£–°–ö: send_currency_alerts –¥–ª—è user_id={user_id}")
        print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"ü§ñ Bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.bot is not None}")
        print("=" * 50)

        if not self.bot:
            print("‚ùå Bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ scheduler")
            return

        try:
            from app.utils.currency_api import format_currency_notification
            from app.keyboards import tr

            print(f"üì• –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
            print(f"üåê –ó–∞–ø—Ä–æ—Å –≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user {user_id}...")

            message = await format_currency_notification(user_id, tr)

            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ:")
            print(f"   –î–ª–∏–Ω–∞: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {message[:200]}")

            print(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É...")
            result = await self.bot.send_message(user_id, message, reply_markup=main_menu)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! Message ID: {result.message_id}")

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤–∞–ª—é—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
        finally:
            print("=" * 50 + "\n")

    async def send_repeating_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("\n" + "="*50)
        print("üîÅ –ó–ê–ü–£–°–ö: send_repeating_reminders")
        print("="*50)

        if not self.bot:
            print("‚ùå Bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ scheduler")
            return

        try:
            now = datetime.now().replace(second=0, microsecond=0)
            print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")

            reminders = await get_due_repeating_reminders(now)
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î: {len(reminders)}")

            if not reminders:
                print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return

            for idx, r in enumerate(reminders, 1):
                print(f"\nüìù –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {idx}/{len(reminders)}:")
                print(f"   ID: {r['id']}")
                print(f"   user_id: {r['user_id']}")
                print(f"   text: {r['text']}")
                print(f"   due: {r['due']}")
                print(f"   repeat: {r['repeat']}")
                print(f"   is_active: {r.get('is_active', 'N/A')}")

                user_id = r['user_id']

                try:
                    due_time = r['due']
                    if isinstance(due_time, datetime):
                        due_time = due_time.replace(second=0, microsecond=0)
                    print(f"   ‚è∞ due_time (normalized): {due_time}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
                    if due_time > now:
                        print(f"   ‚è≠Ô∏è –ü–†–û–ü–£–°–ö: due –≤ –±—É–¥—É—â–µ–º ({due_time} > {now})")
                        continue

                    print(f"   ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ")

                    text = f"‚è∞ {r['text']}"
                    print(f"   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    await self.bot.send_message(user_id, text)
                    print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
                    new_due = None
                    print(f"   üîÑ –†–∞—Å—á—ë—Ç —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã (repeat={r['repeat']})")

                    if r['repeat'] == "daily":
                        new_due = due_time + timedelta(days=1)
                        print(f"   üìÖ –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ (daily): {new_due}")

                    elif r['repeat'] == "monthly":
                        current_month = due_time.month
                        current_year = due_time.year

                        next_month = current_month + 1
                        next_year = current_year

                        if next_month > 12:
                            next_month = 1
                            next_year += 1

                        max_day = calendar.monthrange(next_year, next_month)[1]
                        next_day = min(due_time.day, max_day)

                        new_due = due_time.replace(year=next_year, month=next_month, day=next_day)
                        print(f"   üìÖ –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ (monthly): {new_due}")

                    if new_due:
                        print(f"   üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –ë–î...")
                        await update_reminder_due(r['id'], new_due)
                        print(f"   ‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_due}")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É")

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                    traceback.print_exc()

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_repeating_reminders: {e}")
            traceback.print_exc()
        finally:
            print("="*50 + "\n")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = ReminderScheduler()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
async def schedule_all_reminders():
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await scheduler.schedule_all_reminders()