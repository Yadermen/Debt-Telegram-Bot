"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
"""
import asyncio
from datetime import datetime
from typing import List, Tuple

from ..database import (
    get_all_users, save_scheduled_message,
    get_pending_scheduled_messages, delete_scheduled_message
)


async def send_broadcast_to_all_users(text: str, photo_id: str = None, admin_id: int = None) -> Tuple[int, int, List[int]]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    from app.bot import bot

    users = await get_all_users()
    success_count = 0
    error_count = 0
    blocked_users = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if admin_id:
        try:
            start_message = f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n\nüìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\nüìù –¢–∏–ø: {'–° —Ñ–æ—Ç–æ' if photo_id else '–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç'}"
            await bot.send_message(admin_id, start_message)
        except Exception:
            pass

    for i, user in enumerate(users, 1):
        try:
            if photo_id:
                await bot.send_photo(user['user_id'], photo_id, caption=text)
            else:
                await bot.send_message(user['user_id'], text)
            success_count += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if admin_id and i % 10 == 0:
                try:
                    progress = f"üì§ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(users)} ({round(i/len(users)*100, 1)}%)"
                    await bot.send_message(admin_id, progress)
                except Exception:
                    pass

            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            error_count += 1
            blocked_users.append(user['user_id'])
            # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏

    return success_count, error_count, blocked_users


async def send_scheduled_message(message_data: dict) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    from bot import bot

    try:
        if message_data['photo_id']:
            await bot.send_photo(message_data['user_id'], message_data['photo_id'], caption=message_data['text'])
        else:
            await bot.send_message(message_data['user_id'], message_data['text'])
        return True
    except Exception as e:
        # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏
        return False


async def schedule_message_for_user(user_id: int, text: str, photo_id: str = None, schedule_datetime: str = None) -> bool:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from utils.scheduler import scheduler

    if schedule_datetime:
        await save_scheduled_message(user_id, text, photo_id, schedule_datetime)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        job_id = f"scheduled_msg_{user_id}_{datetime.now().timestamp()}"
        schedule_time = datetime.strptime(schedule_datetime, '%Y-%m-%d %H:%M')
        scheduler.add_job(
            send_scheduled_message,
            'date',
            run_date=schedule_time,
            id=job_id,
            args=[{'user_id': user_id, 'text': text, 'photo_id': photo_id}]
        )
        return True
    return False


async def send_scheduled_broadcast_with_stats(text: str, photo_id: str = None, admin_id: int = None) -> Tuple[int, int, List[int]]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω—É"""
    from bot import bot

    success, errors, blocked_users = await send_broadcast_to_all_users(text, photo_id, admin_id)

    if admin_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        scheduled_stats = f"""
üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}
‚ùå –û—à–∏–±–æ–∫: {errors}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {round((success/(success+errors))*100, 1) if (success+errors) > 0 else 0}%

üìù –î–µ—Ç–∞–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success + errors}
‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: {success}
‚Ä¢ –ù–µ –ø–æ–ª—É—á–∏–ª–∏: {errors}

‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""

        try:
            await bot.send_message(admin_id, scheduled_stats)
        except Exception:
            pass

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if blocked_users and len(blocked_users) <= 10:
            blocked_text = f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 10):\n"
            for user_id in blocked_users[:10]:
                blocked_text += f"‚Ä¢ {user_id}\n"
            try:
                await bot.send_message(admin_id, blocked_text)
            except Exception:
                pass
        elif blocked_users:
            try:
                await bot.send_message(admin_id, f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(blocked_users)} (—Å–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç)")
            except Exception:
                pass

    return success, errors, blocked_users


async def process_scheduled_messages():
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        messages = await get_pending_scheduled_messages()
        for message in messages:
            sent = await send_scheduled_message(message)
            if sent:
                await delete_scheduled_message(message['id'])
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


async def check_scheduled_messages():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è scheduler)"""
    await process_scheduled_messages()