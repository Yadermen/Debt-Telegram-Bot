"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
"""
from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..database import get_user_data, get_user_by_id, save_user_lang, get_or_create_user
from ..keyboards import tr, LANGS, main_menu, CallbackData
from ..utils import safe_edit_message

router = Router()


async def language_menu_start(user_id: int) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ)"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–†—É—Å—Å–∫–∏–π",
                callback_data=CallbackData.SETLANG_RU
            )
        ],
        [
            InlineKeyboardButton(
                text="O'zbek tili",
                callback_data=CallbackData.SETLANG_UZ
            )
        ]
    ])


@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await get_user_by_id(user_id)

        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
            welcome_text = """
üá∑üá∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QarzNazoratBot!
–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:

üá∫üáø QarzNazoratBot-ga xush kelibsiz!
–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:
"""
            kb = await language_menu_start(user_id)
            await message.answer(welcome_text, reply_markup=kb)
            return

        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = await get_user_data(user_id)
        welcome_text = await tr(user_id, 'welcome')
        kb = await main_menu(user_id)
        await message.answer(welcome_text, reply_markup=kb)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ cmd_start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        welcome_text = """
üá∑üá∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QarzNazoratBot!
–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:

üá∫üáø QarzNazoratBot-ga xush kelibsiz!
–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:
"""
        kb = await language_menu_start(user_id)
        await message.answer(welcome_text, reply_markup=kb)


async def language_menu_settings(user_id: int) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ)"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–†—É—Å—Å–∫–∏–π",
                callback_data=CallbackData.SETLANG_RU
            )
        ],
        [
            InlineKeyboardButton(
                text="O'zbek tili",
                callback_data=CallbackData.SETLANG_UZ
            )
        ],
        [
            InlineKeyboardButton(
                text=await tr(user_id, 'to_menu'),
                callback_data=CallbackData.BACK_MAIN
            )
        ]
    ])


@router.callback_query(lambda c: c.data == CallbackData.CHANGE_LANG)
async def change_lang_menu(call: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    user_id = call.from_user.id

    try:
        kb = await language_menu_settings(user_id)
        choose_lang_text = await tr(user_id, 'choose_lang')
        await safe_edit_message(call, choose_lang_text, kb)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ change_lang_menu: {e}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞")


@router.callback_query(lambda c: c.data.startswith('setlang_'))
async def set_language(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    try:
        lang = call.data.split('_')[1]  # setlang_ru -> ru
        user_id = call.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —è–∑—ã–∫–∞
        if lang not in LANGS:
            await call.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∑–±–µ–∫—Å–∫–∏–º —è–∑—ã–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user = await get_or_create_user(user_id, default_lang='uz')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
        await save_user_lang(user_id, lang)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        welcome_text = await tr(user_id, 'welcome')  # –¢–µ–ø–µ—Ä—å tr –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫
        kb = await main_menu(user_id)

        await safe_edit_message(call, welcome_text, kb)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
        if lang == 'ru':
            lang_change_msg = "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
        else:
            lang_change_msg = "Siz tilni o'zbek tiliga o'zgartirdingiz"

        await call.answer(f"‚úÖ {lang_change_msg}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_language: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞")


@router.callback_query(lambda c: c.data == CallbackData.BACK_MAIN)
async def back_to_main(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = call.from_user.id

    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

        welcome_text = await tr(user_id, 'welcome')
        kb = await main_menu(user_id)

        await safe_edit_message(call, welcome_text, kb)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_main: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")