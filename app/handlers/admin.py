import re
from urllib.parse import urlparse

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import asyncio
import os
import traceback

from sqlalchemy import select

from app.database import (
    get_all_users,
    get_user_count,
    get_active_debts_count,
    save_scheduled_message, get_db,
)
from app.database.crud import get_referrals, create_referral, deactivate_referral, get_referral_stats, \
    get_referral_by_id, activate_referral
from app.database.models import Referral
from app.keyboards import CallbackData
from app.states import AdminBroadcast, AdminReferral
from app.utils.broadcast import send_broadcast_to_all_users, send_scheduled_broadcast_with_stats

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
try:
    from app.utils.scheduler import scheduler  # –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º .scheduler (APScheduler)
except Exception as e:
    print(f"[admin.py] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å scheduler: {e}")
    scheduler = None

router = Router()
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []
print(f"[admin.py] ‚úÖ ADMIN_IDS: {ADMIN_IDS}")

def kb_admin_referrals() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data="referrals_list")],
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="referral_create")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="referrals_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
    ])

def kb_cancel_photo():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_photo")]
    ])

def kb_back_to_referrals() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_referrals")]
    ])

def kb_admin_main() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="admin_referrals")],
        [InlineKeyboardButton(text="üåê –í–µ–±‚Äë–∞–¥–º–∏–Ω–∫–∞", url="http://79.133.183.213:5000/admin")],
        [InlineKeyboardButton(text="üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CallbackData.BACK_MAIN)],
    ])
def kb_back_to_admin() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
# ============================ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ============================

def is_admin(user_id: int) -> bool:
    res = user_id in ADMIN_IDS
    print(f"[is_admin] {user_id} -> {res}")
    return res


async def get_admin_stats_safely():
    print("[get_admin_stats_safely] –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    user_count, active_debts = 0, 0
    for _ in range(3):
        try:
            user_count = await get_user_count()
            break
        except Exception as e:
            print(f"[get_admin_stats_safely] –û—à–∏–±–∫–∞ user_count: {e}")
            await asyncio.sleep(0.1)
    for _ in range(3):
        try:
            active_debts = await get_active_debts_count()
            break
        except Exception as e:
            print(f"[get_admin_stats_safely] –û—à–∏–±–∫–∞ active_debts: {e}")
            await asyncio.sleep(0.1)
    return user_count, active_debts


def build_broadcast_menu(data: dict) -> InlineKeyboardMarkup:
    print(f"[build_broadcast_menu] data={data}")
    rows = [[InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="setup_buttons")]]
    if data.get("broadcast_photo"):
        rows.append([
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_broadcast_photo"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_broadcast_photo"),
        ])
    else:
        rows.append([InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_broadcast_photo")])
    rows.append([
        InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_broadcast_now"),
        InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_broadcast"),
    ])
    rows.append([InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def is_valid_url(url: str) -> bool:
    try:
        result = urlparse(url)
        return all([result.scheme in ("http", "https"), result.netloc and "." in result.netloc])
    except:
        return False

def build_buttons_preview_kb(buttons: list[dict]) -> InlineKeyboardMarkup:
    print(f"[build_buttons_preview_kb] buttons={buttons}")
    kb_rows = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ URL, —á–∏—Å—Ç–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
    for idx, btn in enumerate(buttons):
        title = f"{idx+1}. {btn.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}"
        url = btn.get("url") or "https://example.com"
        kb_rows.append([InlineKeyboardButton(text=title, url=url)])
    kb_rows.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_button"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="remove_button_prompt"),
    ])
    kb_rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="buttons_done")])
    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


def build_final_keyboard(buttons: list[dict]) -> InlineKeyboardMarkup | None:
    print(f"[build_final_keyboard] buttons={buttons}")
    if not buttons:
        return None
    rows = []
    for btn in buttons:
        text = (btn.get("text") or "").strip()
        url = (btn.get("url") or "").strip()
        if text and url:
            rows.append([InlineKeyboardButton(text=text, url=url)])
    return InlineKeyboardMarkup(inline_keyboard=rows) if rows else None


async def safe_edit_or_send(call: CallbackQuery, text: str):
    """–ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ."""
    try:
        if call.message.text:
            return await call.message.edit_text(text)
        else:
            return await call.message.answer(text)
    except Exception as e:
        print(f"[safe_edit_or_send] edit_text/answer failed: {e}")
        try:
            return await call.message.answer(text)
        except Exception as e2:
            print(f"[safe_edit_or_send] answer failed too: {e2}")


def log_exc(prefix: str, e: Exception):
    print(f"{prefix}: {e}")
    traceback.print_exc()


# ============================ –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å ============================

@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if message.chat.type == "private":
        # –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /admin
        try:
            await message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ /admin: {e}")

        # –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –º–µ–Ω—é)
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    print(f"[admin_panel] /admin –æ—Ç {message.from_user.id}")
    await state.clear()
    if not is_admin(message.from_user.id):
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    user_count, active_debts = await get_admin_stats_safely()

    await message.answer(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}", reply_markup=kb_admin_main())


@router.callback_query(F.data == "admin_back")
async def admin_back(call: CallbackQuery, state: FSMContext):
    print(f"[admin_back] –æ—Ç {call.from_user.id}")
    await call.answer()

    if not is_admin(call.from_user.id):
        return

    await state.clear()
    user_count, active_debts = await get_admin_stats_safely()


    text = f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ: –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ —à–ª—ë–º –Ω–æ–≤–æ–µ
    try:
        if call.message.text:
            await call.message.edit_text(text, reply_markup=kb_admin_main())
        else:
            await call.message.answer(text, reply_markup=kb_admin_main())
    except Exception as e:
        print(f"[admin_back] edit_text error: {e}")
        await call.message.answer(text, reply_markup=kb_admin_main())



# ============================ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ============================

@router.callback_query(F.data == "admin_users")
async def admin_users_list(call: CallbackQuery):
    print(f"[admin_users_list] –æ—Ç {call.from_user.id}")
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    try:
        users = await get_all_users()
        cnt = len(users) if users else 0
        print(f"[admin_users_list] users={cnt}")
        if not users:
            return await safe_edit_or_send(call, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
        text = "\n\n".join([f"{i+1}. ID: {u['user_id']}" for i, u in enumerate(users[:10])])
        if len(users) > 10:
            text += f"\n... –∏ –µ—â—ë {len(users)-10}"
        await safe_edit_or_send(call, text)
    except Exception as e:
        log_exc("[admin_users_list] error", e)
        await safe_edit_or_send(call, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(call: CallbackQuery, state: FSMContext):
    print(f"[start_broadcast] –æ—Ç {call.from_user.id}")
    await call.answer()
    await state.set_state(AdminBroadcast.waiting_for_text)
    await state.update_data(broadcast_text=None, broadcast_photo=None, buttons=[])

    msg = await safe_edit_or_send(call, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ–¥—Å–∫–∞–∑–∫–∏
    await state.update_data(last_bot_msg=msg.message_id)



@router.message(AdminBroadcast.waiting_for_text)
async def set_broadcast_text(message: Message, state: FSMContext):
    text = (message.text or "").strip()

    try: await message.delete()
    except: pass

    data = await state.get_data()

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if preview_id := data.get("preview_msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, preview_id)
        except: pass

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    if last_bot := data.get("last_bot_msg"):
        try:
            await message.bot.delete_message(message.chat.id, last_bot)
        except: pass

    if not text or len(text) < 5:
        msg = await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤")
        await state.update_data(last_bot_msg=msg.message_id)
        return

    await state.update_data(broadcast_text=text)

    # –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    kb = build_final_keyboard(data.get("buttons", []))
    preview = await message.answer(f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}", reply_markup=kb)
    await state.update_data(preview_msg_id=preview.message_id)

    # –º–µ–Ω—é
    menu_kb = build_broadcast_menu(await state.get_data())
    menu_msg = await message.answer("‚öôÔ∏è –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=menu_kb)
    await state.update_data(last_bot_msg=menu_msg.message_id)



# ============================ –§–æ—Ç–æ ============================

@router.callback_query(F.data == "add_broadcast_photo")
async def add_photo(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(AdminBroadcast.waiting_for_photo)

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await call.message.delete()
    except: pass

    # –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    msg = await call.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb_cancel_photo())
    await state.update_data(last_bot_msg=msg.message_id)


@router.message(AdminBroadcast.waiting_for_photo, F.photo)
async def set_photo(message: Message, state: FSMContext):
    try: await message.delete()
    except: pass

    data = await state.get_data()

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –º–µ–Ω—é
    if preview_id := data.get("preview_msg_id"):
        try: await message.bot.delete_message(message.chat.id, preview_id)
        except: pass
    if last_bot := data.get("last_bot_msg"):
        try: await message.bot.delete_message(message.chat.id, last_bot)
        except: pass

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    await state.update_data(broadcast_photo=photo_id)

    # –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    final_kb = build_final_keyboard(data.get("buttons", []))
    preview = await message.answer_photo(photo_id, caption=f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data.get('broadcast_text') or ''}", reply_markup=final_kb)
    await state.update_data(preview_msg_id=preview.message_id)

    # –Ω–æ–≤–æ–µ –º–µ–Ω—é
    menu_kb = build_broadcast_menu(await state.get_data())
    menu_msg = await message.answer("‚öôÔ∏è –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=menu_kb)
    await state.update_data(last_bot_msg=menu_msg.message_id)

    await state.set_state(AdminBroadcast.waiting_for_text)




@router.message(AdminBroadcast.waiting_for_photo, F.text)
async def wrong_input_photo(message: Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try: await message.delete()
    except: pass

    data = await state.get_data()
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    if last_bot := data.get("last_bot_msg"):
        try: await message.bot.delete_message(message.chat.id, last_bot)
        except: pass

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", reply_markup=kb_cancel_photo())
    await state.update_data(last_bot_msg=msg.message_id)


@router.callback_query(F.data == "cancel_photo")
async def cancel_photo(call: CallbackQuery, state: FSMContext):
    await call.answer()

    # —É–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É/–æ—à–∏–±–∫—É
    try: await call.message.delete()
    except: pass

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
    data = await state.get_data()
    menu_kb = build_broadcast_menu(data)
    msg = await call.message.answer("‚öôÔ∏è –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=menu_kb)
    await state.update_data(last_bot_msg=msg.message_id)

    await state.set_state(AdminBroadcast.waiting_for_text)

# ==== –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ: —Å—Ä–∞–∑—É –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Ñ–æ—Ç–æ + –º–µ–Ω—é ====
@router.callback_query(F.data == "remove_broadcast_photo")
async def remove_photo(call: CallbackQuery, state: FSMContext):
    print(f"[remove_photo] –æ—Ç {call.from_user.id}")
    await call.answer()

    # 1) –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ state
    await state.update_data(broadcast_photo=None)
    data = await state.get_data()
    print(f"[remove_photo] —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω–æ. state={data}")

    # 2) –°—Ä–∞–∑—É —à–ª—ë–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–ï–ó —Ñ–æ—Ç–æ –∏ –Ω–∏–∂–µ ‚Äî –º–µ–Ω—é
    data = await state.get_data()
    await render_preview_and_menu(call.message, state, data)

    # 3) –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—â–∏–π —Ä–µ–∂–∏–º)
    await state.set_state(AdminBroadcast.waiting_for_text)
    print("[remove_photo] —Å–æ—Å—Ç–æ—è–Ω–∏–µ -> waiting_for_text")



# ==== Helper: –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä + –º–µ–Ω—é (–±–µ–∑ —Ñ–æ—Ç–æ) ====
async def render_preview_and_menu(message: Message, state: FSMContext, data: dict):
    print(f"[render_preview_and_menu] data={data}")
    text = (data.get("broadcast_text") or "").strip()
    buttons = data.get("buttons", [])
    final_kb = build_final_keyboard(buttons)
    menu_kb = build_broadcast_menu(data)

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –µ—Å–ª–∏ –±—ã–ª
    if preview_id := data.get("preview_msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, preview_id)
        except: pass

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –±—ã–ª–æ
    if last_bot := data.get("last_bot_msg"):
        try:
            await message.bot.delete_message(message.chat.id, last_bot)
        except: pass

    # –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview = await message.answer(f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}", reply_markup=final_kb)
    await state.update_data(preview_msg_id=preview.message_id)
    print("[render_preview_and_menu] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–±–µ–∑ —Ñ–æ—Ç–æ)")

    # –Ω–æ–≤–æ–µ –º–µ–Ω—é
    menu_msg = await message.answer("‚öôÔ∏è –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=menu_kb)
    await state.update_data(last_bot_msg=menu_msg.message_id)
    print("[render_preview_and_menu] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏")




# ============================ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ ============================

@router.callback_query(F.data == "setup_buttons")
async def setup_buttons(call: CallbackQuery, state: FSMContext):
    await call.answer()

    # ‚ùå —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    # ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    data = await state.get_data()
    buttons = data.get("buttons", [])
    kb = build_buttons_preview_kb(buttons)


    await call.message.answer("üìã –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=kb)



@router.callback_query(F.data == "add_button")
async def add_button(call: CallbackQuery, state: FSMContext):
    await call.answer()

    # —É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏)
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    await state.set_state(AdminBroadcast.waiting_for_button_text)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Äë–ø–æ–¥—Å–∫–∞–∑–∫—É
    msg = await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")
    await state.update_data(last_bot_msg=msg.message_id)

@router.message(AdminBroadcast.waiting_for_button_text)
async def button_text(message: Message, state: FSMContext):
    user_input = (message.text or "").strip()

    try: await message.delete()
    except: pass

    data = await state.get_data()
    if last_bot := data.get("last_bot_msg"):
        try: await message.bot.delete_message(message.chat.id, last_bot)
        except: pass

    if not user_input:
        msg = await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        await state.update_data(last_bot_msg=msg.message_id)
        return

    await state.update_data(current_button_text=user_input)
    await state.set_state(AdminBroadcast.waiting_for_button_url)
    msg = await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏ (http:// –∏–ª–∏ https://):")
    await state.update_data(last_bot_msg=msg.message_id)


@router.message(AdminBroadcast.waiting_for_button_url)
async def button_url(message: Message, state: FSMContext):
    url = (message.text or "").strip()

    try: await message.delete()
    except: pass

    data = await state.get_data()
    if last_bot := data.get("last_bot_msg"):
        try: await message.bot.delete_message(message.chat.id, last_bot)
        except: pass

    if not is_valid_url(url):
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (http/https).")
        await state.update_data(last_bot_msg=msg.message_id)
        return

    data = await state.get_data()
    btn_text = (data.get("current_button_text") or "").strip()
    if not btn_text:
        await state.set_state(AdminBroadcast.waiting_for_text)
        await state.update_data(current_button_text=None)
        msg = await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.update_data(last_bot_msg=msg.message_id)
        return

    buttons = data.get("buttons", [])
    buttons.append({"text": btn_text, "url": url})
    await state.update_data(buttons=buttons, current_button_text=None)

    kb = build_buttons_preview_kb(buttons)
    msg = await message.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=kb)
    await state.update_data(last_bot_msg=msg.message_id)
    await state.set_state(AdminBroadcast.waiting_for_text)


@router.callback_query(F.data == "remove_button_prompt")
async def remove_button_prompt(call: CallbackQuery, state: FSMContext):
    print(f"[remove_button_prompt] –æ—Ç {call.from_user.id}")
    await call.answer()
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    data = await state.get_data()
    buttons = data.get("buttons", [])
    print(f"[remove_button_prompt] –≤—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫={len(buttons)}")
    if not buttons:
        await call.message.answer("–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç.")
        return

    rows = []
    for idx, btn in enumerate(buttons):
        rows.append([InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {idx+1}. {btn.get('text','')}", callback_data=f"remove_button_{idx}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="setup_buttons")])

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))


@router.callback_query(F.data.startswith("remove_button_"))
async def remove_button(call: CallbackQuery, state: FSMContext):
    print(f"[remove_button] data='{call.data}'")
    await call.answer()
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    idx_str = call.data.replace("remove_button_", "")
    try:
        idx = int(idx_str)
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    data = await state.get_data()
    buttons = data.get("buttons", [])
    if 0 <= idx < len(buttons):
        removed = buttons.pop(idx)
        await state.update_data(buttons=buttons)
        print(f"[remove_button] —É–¥–∞–ª–µ–Ω–æ –∏–Ω–¥–µ–∫—Å={idx}, –æ—Å—Ç–∞–ª–æ—Å—å={len(buttons)}")
    else:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        print("[remove_button] –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        return

    kb = build_buttons_preview_kb(buttons)
    await call.message.answer("–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=kb)


@router.callback_query(F.data == "buttons_done")
async def buttons_done(call: CallbackQuery, state: FSMContext):
    print(f"[buttons_done] –æ—Ç {call.from_user.id}")
    await call.answer()

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    data = await state.get_data()
    text = data.get("broadcast_text", "") or ""
    photo_id = data.get("broadcast_photo")
    final_kb = build_final_keyboard(data.get("buttons", []))
    menu_kb = build_broadcast_menu(data)

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –µ—Å–ª–∏ –±—ã–ª
    if preview_id := data.get("preview_msg_id"):
        try:
            await call.bot.delete_message(call.message.chat.id, preview_id)
        except: pass

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –±—ã–ª–æ
    if last_bot := data.get("last_bot_msg"):
        try:
            await call.bot.delete_message(call.message.chat.id, last_bot)
        except: pass

    # –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if photo_id:
        preview = await call.message.answer_photo(photo_id, caption=f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}", reply_markup=final_kb)
        print("[buttons_done] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å —Ñ–æ—Ç–æ")
    else:
        preview = await call.message.answer(f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}", reply_markup=final_kb)
        print("[buttons_done] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Ñ–æ—Ç–æ")
    await state.update_data(preview_msg_id=preview.message_id)

    # –Ω–æ–≤–æ–µ –º–µ–Ω—é
    menu_msg = await call.message.answer("‚öôÔ∏è –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=menu_kb)
    await state.update_data(last_bot_msg=menu_msg.message_id)
    print("[buttons_done] –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    await state.set_state(AdminBroadcast.waiting_for_text)



# ============================ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ–π—á–∞—Å ============================

@router.callback_query(F.data == "send_broadcast_now")
async def send_now(call: CallbackQuery, state: FSMContext):
    await call.answer()

    # 1Ô∏è‚É£ –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    text = data.get("broadcast_text")
    if not text:
        await call.message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    photo_id = data.get("broadcast_photo")
    buttons = data.get("buttons", [])
    markup = build_final_keyboard(buttons)

    # 2Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    if preview_id := data.get("preview_msg_id"):
        try:
            await call.bot.delete_message(call.message.chat.id, preview_id)
        except: pass
    if last_bot := data.get("last_bot_msg"):
        try:
            await call.bot.delete_message(call.message.chat.id, last_bot)
        except: pass

    # 3Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # 4Ô∏è‚É£ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)


    # 5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    try:
        res = await send_broadcast_to_all_users(text, photo_id, call.from_user.id)
    except Exception as e:
        log_exc("[send_now] –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", e)
        res = None

    # 6Ô∏è‚É£ –†–∞–∑–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if isinstance(res, tuple) and len(res) >= 2:
        success, errors = res[0], res[1]
    elif isinstance(res, int):
        success, errors = res, 0
    else:
        success, errors = 0, 0

    delivered = (success or 0) + (errors or 0)
    pct = round((success / delivered) * 100, 1) if delivered > 0 else 0.0

    result_text = (
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}\n"
        f"üìä –î–æ—Å—Ç–∞–≤–∫–∞: {pct}%\n"
        f"üîò –ö–Ω–æ–ø–æ–∫: {len(buttons)}\n"
        f"üñº –§–æ—Ç–æ: {'–¥–∞' if photo_id else '–Ω–µ—Ç'}"
    )

    # 7Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # 8Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    await call.message.answer(result_text, reply_markup=menu_kb)


# ============================ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: —Ç–µ–∫—Å—Ç ============================

@router.callback_query(F.data == "admin_stats")
async def admin_stats(call: CallbackQuery):
    print(f"[admin_stats] –æ—Ç {call.from_user.id}")
    await call.answer()
    if not is_admin(call.from_user.id):
        return

    user_count, active_debts = await get_admin_stats_safely()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

    await safe_edit_or_send(
        call,
        f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}"
    )
    await call.message.answer("–í—ã–±–µ—Ä–∏f—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back_to_referrals())




# ============================ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ============================

@router.callback_query(F.data == "schedule_broadcast")
async def schedule_broadcast(call: CallbackQuery, state: FSMContext):
    print(f"[schedule_broadcast] –æ—Ç {call.from_user.id}")
    await call.answer()
    await state.set_state(AdminBroadcast.waiting_for_schedule_time)

    text = (
        "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "YYYY-MM-DD HH:MM\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-01-15 14:30"
    )

    try:
        msg = await safe_edit_or_send(call, text)
    except Exception as e:
        log_exc("[schedule_broadcast] prompt failed", e)
        msg = await call.message.answer(text)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ–¥—Å–∫–∞–∑–∫–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    await state.update_data(last_bot_msg=msg.message_id)



@router.message(AdminBroadcast.waiting_for_schedule_time)
async def set_schedule_time(message: Message, state: FSMContext):
    raw = (message.text or "").strip()

    try:
        await message.delete()
    except:
        pass

    data = await state.get_data()
    if last_bot := data.get("last_bot_msg"):
        try:
            await message.bot.delete_message(message.chat.id, last_bot)
        except:
            pass
    try:
        schedule_time = datetime.strptime(raw, "%Y-%m-%d %H:%M")
        if schedule_time <= datetime.now():
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
        return

    data = await state.get_data()
    text = data.get("broadcast_text")
    if not text:
        print("[set_schedule_time] –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()
        return

    photo_id = data.get("broadcast_photo")
    buttons = data.get("buttons", [])
    final_kb = build_final_keyboard(buttons)

    try:
        users = await get_all_users()
        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ë–î (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ)
        saved_count = 0
        for u in users:
            try:
                await save_scheduled_message(
                    u["user_id"],
                    text,
                    photo_id,
                    schedule_time.strftime("%Y-%m-%d %H:%M")
                )
                saved_count += 1
            except Exception as e:
                log_exc(f"[set_schedule_time] save_scheduled_message user_id={u.get('user_id')}", e)

        print(f"[set_schedule_time] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {saved_count}, run_date={schedule_time}")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º job –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        job_id = f"broadcast_{int(datetime.now().timestamp())}"
        if scheduler and getattr(scheduler, "scheduler", None):
            try:
                print("[set_schedule_time] –¥–æ–±–∞–≤–ª—è–µ–º job —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
                scheduler.scheduler.add_job(
                    send_scheduled_broadcast_with_stats,
                    "date",
                    run_date=schedule_time,
                    id=job_id,
                    args=[text, photo_id, message.from_user.id]
                )
            except TypeError as e:
                log_exc("[set_schedule_time] add_job TypeError (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)", e)
                scheduler.scheduler.add_job(
                    send_scheduled_broadcast_with_stats,
                    "date",
                    run_date=schedule_time,
                    id=job_id,
                    args=[text, photo_id, message.from_user.id]
                )
            except Exception as e:
                log_exc("[set_schedule_time] add_job error", e)
        else:
            print("[set_schedule_time] ‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

        confirm = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {saved_count}\n"
            f"üñº –§–æ—Ç–æ: {'–¥–∞' if photo_id else '–Ω–µ—Ç'}\n"
            f"üîò –ö–Ω–æ–ø–æ–∫: {len(buttons)}"
        )
        await message.answer(confirm, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ]))
        print("[set_schedule_time] –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await state.clear()
        print("[set_schedule_time] state –æ—á–∏—â–µ–Ω")
    except Exception as e:
        log_exc("[set_schedule_time] –æ–±—â–∞—è –æ—à–∏–±–∫–∞", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        print("[set_schedule_time] state –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")


@router.callback_query(F.data == "admin_referrals")
async def admin_referrals(call: CallbackQuery, state: FSMContext):
    print(f"[admin_referrals] –æ—Ç {call.from_user.id}")
    await call.answer()
    if not is_admin(call.from_user.id):
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫–ª–∏–∫–Ω—É–ª–∏
    try:
        await call.message.delete()
    except Exception as e:
        print(f"[admin_referrals] –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


    await call.message.answer("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏", reply_markup=kb_admin_referrals())


@router.callback_query(F.data == "referrals_list")
async def referrals_list(call: CallbackQuery):
    await call.answer()
    referrals = await get_referrals(active_only=False)
    if not referrals:
        return await call.message.edit_text(
            "‚ùå –†–µ—Ñ–µ—Ä–∞–ª–æ–∫ –Ω–µ—Ç",
            reply_markup=kb_back_to_referrals()
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    rows = []
    for r in referrals:
        rows.append([
            InlineKeyboardButton(
                text=f"{'‚úÖ' if r['is_active'] else '‚ùå'} {r['code']}",
                callback_data=f"referral_view_{r['id']}"
            )
        ])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_referrals")])

    await call.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows)
    )



@router.callback_query(F.data == "referral_create")
async def referral_create(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(AdminReferral.waiting_for_code)
    msg = await safe_edit_or_send(call, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: promo2025)")
    await state.update_data(last_bot_msg=msg.message_id)



@router.message(AdminReferral.waiting_for_code)
async def referral_set_code(message: Message, state: FSMContext):
    raw_code = (message.text or "").strip()

    try:
        await message.delete()
    except:
        pass

    data = await state.get_data()
    if last_bot := data.get("last_bot_msg"):
        try:
            await message.bot.delete_message(message.chat.id, last_bot)
        except:
            pass

    # üîé –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not raw_code:
        msg = await message.answer("‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        await state.update_data(last_bot_msg=msg.message_id)
        return

    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –¥–µ—Ñ–∏—Å
    if not re.fullmatch(r"[A-Za-z0-9_-]+", raw_code):
        msg = await message.answer("‚ùå –ö–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, '_' –∏ '-'. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        await state.update_data(last_bot_msg=msg.message_id)
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ
    if len(raw_code) < 3 or len(raw_code) > 50:
        msg = await message.answer("‚ùå –î–ª–∏–Ω–∞ –∫–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        await state.update_data(last_bot_msg=msg.message_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    async with get_db() as session:
        exists = await session.scalar(select(Referral).where(Referral.code == raw_code))
    if exists:
        msg = await message.answer("‚ùå –¢–∞–∫–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:")
        await state.update_data(last_bot_msg=msg.message_id)
        return

    # ‚úÖ –í—Å—ë –æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
    await state.update_data(referral_code=raw_code)
    await state.set_state(AdminReferral.waiting_for_description)
    msg = await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):")
    await state.update_data(last_bot_msg=msg.message_id)



@router.message(AdminReferral.waiting_for_description)
async def referral_set_description(message: Message, state: FSMContext):
    desc = (message.text or "").strip()

    try: await message.delete()
    except: pass

    data = await state.get_data()
    if last_bot := data.get("last_bot_msg"):
        try: await message.bot.delete_message(message.chat.id, last_bot)
        except: pass

    if desc == "-":
        desc = None

    code = data.get("referral_code")

    try:
        referral = await create_referral(code, desc)
        if referral:
            await message.answer(
                f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–°—Å—ã–ª–∫–∞: https://t.me//QarzNazoratBot?start={referral['code']}\n"
                f"–ö–æ–¥: {referral['code']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {referral['description'] or '-'}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if referral['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}",
                reply_markup=kb_back_to_referrals()
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏", reply_markup=kb_back_to_referrals())
    except Exception as e:
        log_exc("[referral_set_description] –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏", reply_markup=kb_back_to_referrals())

    await state.clear()



@router.callback_query(F.data == "referrals_list")
async def referrals_list(call: CallbackQuery):
    await call.answer()
    referrals = await get_referrals(active_only=False)
    if not referrals:
        return await call.message.edit_text(
            "‚ùå –†–µ—Ñ–µ—Ä–∞–ª–æ–∫ –Ω–µ—Ç",
            reply_markup=kb_back_to_referrals()
        )

    rows = []
    for r in referrals:
        # —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤–µ–¥—ë—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏
        rows.append([
            InlineKeyboardButton(
                text=f"{'‚úÖ' if r['is_active'] else '‚ùå'} {r['code']}",
                callback_data=f"referral_view:{r['id']}"
            )
        ])
    rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_referrals")])

    await call.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows)
    )








@router.callback_query(F.data.startswith("referral_stats_"))
async def referral_stats(call: CallbackQuery):
    await call.answer()
    rid = int(call.data.replace("referral_stats_", ""))
    stats = await get_referral_stats(rid)
    if not stats:
        return await call.message.edit_text("‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=kb_back_to_referrals())

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {stats['last_joined'] or '-'}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"referral_view_{rid}")]
    ])

    await call.message.edit_text(text, reply_markup=kb)





async def render_referral_view(call: CallbackQuery, rid: int):
    referral = await get_referral_by_id(rid)
    if not referral:
        return await call.message.edit_text("‚ùå –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=kb_back_to_referrals())

    stats = await get_referral_stats(rid)

    text = (
        f"üéØ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n\n"
        f"–°—Å—ã–ª–∫–∞: https://t.me//QarzNazoratBot?start={referral['code']}\n"
        f"–ö–æ–¥: {referral['code']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {referral['description'] or '-'}\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if referral['is_active'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
        f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}"
    )

    action_button = (
        InlineKeyboardButton(text="üóë –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"referral_deactivate_{rid}")
        if referral["is_active"]
        else InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"referral_activate_{rid}")
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [action_button],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="referrals_list")],
    ])

    await call.message.edit_text(text, reply_markup=kb)


# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.callback_query(F.data.startswith("referral_view_"))
async def referral_view(call: CallbackQuery):
    rid = int(call.data.split("_")[2])
    await render_referral_view(call, rid)


# –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
@router.callback_query(F.data.startswith("referral_deactivate_"))
async def referral_deactivate(call: CallbackQuery):
    rid = int(call.data.split("_")[2])
    ok = await deactivate_referral(rid)
    await call.answer("‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if ok else "‚ùå –û—à–∏–±–∫–∞", show_alert=not ok)
    await render_referral_view(call, rid)


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è
@router.callback_query(F.data.startswith("referral_activate_"))
async def referral_activate(call: CallbackQuery):
    rid = int(call.data.split("_")[2])
    ok = await activate_referral(rid)
    await call.answer("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if ok else "‚ùå –û—à–∏–±–∫–∞", show_alert=not ok)
    await render_referral_view(call, rid)





@router.callback_query(F.data == "referrals_stats")
async def referrals_stats(call: CallbackQuery):
    await call.answer()
    referrals = await get_referrals(active_only=False)
    if not referrals:
        return await call.message.edit_text("‚ùå –†–µ—Ñ–µ—Ä–∞–ª–æ–∫ –Ω–µ—Ç", reply_markup=kb_back_to_referrals())

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞–º:\n\n"
    for r in referrals[:10]:
        stats = await get_referral_stats(r["id"])
        text += f"–ö–æ–¥: {r['code']} ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
    if len(referrals) > 10:
        text += f"\n... –∏ –µ—â—ë {len(referrals)-10}"

    await call.message.edit_text(text, reply_markup=kb_back_to_referrals())


