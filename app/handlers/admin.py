from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import asyncio
import os
import traceback

from app.database import (
    get_all_users,
    get_user_count,
    get_active_debts_count,
    save_scheduled_message,
)
from app.states import AdminBroadcast
from app.utils.broadcast import send_broadcast_to_all_users, send_scheduled_broadcast_with_stats

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
try:
    from app.utils.scheduler import scheduler  # –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º .scheduler (APScheduler)
except Exception as e:
    print(f"[admin.py] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å scheduler: {e}")
    scheduler = None

router = Router()
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []
print(f"[admin.py] ‚úÖ ADMIN_IDS: {ADMIN_IDS}")


# ============================ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ============================

def is_admin(user_id: int) -> bool:
    res = user_id in ADMIN_IDS
    print(f"[is_admin] {user_id} -> {res}")
    return res


async def get_admin_stats_safely():
    print("[get_admin_stats_safely] –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    user_count, active_debts = 0, 0
    for _ in range(3):
        try:
            user_count = await get_user_count()
            break
        except Exception as e:
            print(f"[get_admin_stats_safely] –û—à–∏–±–∫–∞ user_count: {e}")
            await asyncio.sleep(0.1)
    for _ in range(3):
        try:
            active_debts = await get_active_debts_count()
            break
        except Exception as e:
            print(f"[get_admin_stats_safely] –û—à–∏–±–∫–∞ active_debts: {e}")
            await asyncio.sleep(0.1)
    return user_count, active_debts


def build_broadcast_menu(data: dict) -> InlineKeyboardMarkup:
    print(f"[build_broadcast_menu] data={data}")
    rows = [[InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="setup_buttons")]]
    if data.get("broadcast_photo"):
        rows.append([
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_broadcast_photo"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="remove_broadcast_photo"),
        ])
    else:
        rows.append([InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_broadcast_photo")])
    rows.append([
        InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_broadcast_now"),
        InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_broadcast"),
    ])
    rows.append([InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def build_buttons_preview_kb(buttons: list[dict]) -> InlineKeyboardMarkup:
    print(f"[build_buttons_preview_kb] buttons={buttons}")
    kb_rows = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ URL, —á–∏—Å—Ç–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
    for idx, btn in enumerate(buttons):
        title = f"{idx+1}. {btn.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}"
        url = btn.get("url") or "https://example.com"
        kb_rows.append([InlineKeyboardButton(text=title, url=url)])
    kb_rows.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_button"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="remove_button_prompt"),
    ])
    kb_rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="buttons_done")])
    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


def build_final_keyboard(buttons: list[dict]) -> InlineKeyboardMarkup | None:
    print(f"[build_final_keyboard] buttons={buttons}")
    if not buttons:
        return None
    rows = []
    for btn in buttons:
        text = (btn.get("text") or "").strip()
        url = (btn.get("url") or "").strip()
        if text and url:
            rows.append([InlineKeyboardButton(text=text, url=url)])
    return InlineKeyboardMarkup(inline_keyboard=rows) if rows else None


async def safe_edit_or_send(call: CallbackQuery, text: str):
    """–ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ."""
    try:
        if call.message.text:
            return await call.message.edit_text(text)
        else:
            return await call.message.answer(text)
    except Exception as e:
        print(f"[safe_edit_or_send] edit_text/answer failed: {e}")
        try:
            return await call.message.answer(text)
        except Exception as e2:
            print(f"[safe_edit_or_send] answer failed too: {e2}")


def log_exc(prefix: str, e: Exception):
    print(f"{prefix}: {e}")
    traceback.print_exc()


# ============================ –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å ============================

@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    print(f"[admin_panel] /admin –æ—Ç {message.from_user.id}")
    await state.clear()
    if not is_admin(message.from_user.id):
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    user_count, active_debts = await get_admin_stats_safely()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({user_count})", callback_data="admin_users")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
    ])
    await message.answer(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}", reply_markup=kb)


@router.callback_query(F.data == "admin_back")
async def admin_back(call: CallbackQuery, state: FSMContext):
    print(f"[admin_back] –æ—Ç {call.from_user.id}")
    await call.answer()

    if not is_admin(call.from_user.id):
        return

    await state.clear()
    user_count, active_debts = await get_admin_stats_safely()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({user_count})", callback_data="admin_users")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
    ])

    text = f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ: –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ —à–ª—ë–º –Ω–æ–≤–æ–µ
    try:
        if call.message.text:
            await call.message.edit_text(text, reply_markup=kb)
        else:
            await call.message.answer(text, reply_markup=kb)
    except Exception as e:
        print(f"[admin_back] edit_text error: {e}")
        await call.message.answer(text, reply_markup=kb)



# ============================ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ============================

@router.callback_query(F.data == "admin_users")
async def admin_users_list(call: CallbackQuery):
    print(f"[admin_users_list] –æ—Ç {call.from_user.id}")
    await call.answer()
    if not is_admin(call.from_user.id):
        return
    try:
        users = await get_all_users()
        cnt = len(users) if users else 0
        print(f"[admin_users_list] users={cnt}")
        if not users:
            return await safe_edit_or_send(call, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
        text = "\n\n".join([f"{i+1}. ID: {u['user_id']}" for i, u in enumerate(users[:10])])
        if len(users) > 10:
            text += f"\n... –∏ –µ—â—ë {len(users)-10}"
        await safe_edit_or_send(call, text)
    except Exception as e:
        log_exc("[admin_users_list] error", e)
        await safe_edit_or_send(call, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.callback_query(F.data == "admin_stats")
async def admin_stats(call: CallbackQuery):
    print(f"[admin_stats] –æ—Ç {call.from_user.id}")
    await call.answer()
    if not is_admin(call.from_user.id):
        return

    user_count, active_debts = await get_admin_stats_safely()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

    await safe_edit_or_send(
        call,
        f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}"
    )
    await call.message.answer("–í—ã–±–µ—Ä–∏f—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


# ============================ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: —Ç–µ–∫—Å—Ç ============================

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(call: CallbackQuery, state: FSMContext):
    print(f"[start_broadcast] –æ—Ç {call.from_user.id}")
    await call.answer()
    await state.set_state(AdminBroadcast.waiting_for_text)
    await state.update_data(broadcast_text=None, broadcast_photo=None, buttons=[])
    await safe_edit_or_send(call, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")


@router.message(AdminBroadcast.waiting_for_text)
async def set_broadcast_text(message: Message, state: FSMContext):
    print(f"[set_broadcast_text] text='{message.text}'")
    await state.update_data(broadcast_text=message.text)
    kb = build_broadcast_menu(await state.get_data())
    await message.answer(f"üì¢ –¢–µ–∫—Å—Ç:\n{message.text}", reply_markup=kb)


# ============================ –§–æ—Ç–æ ============================

@router.callback_query(F.data == "add_broadcast_photo")
async def add_photo(call: CallbackQuery, state: FSMContext):
    print(f"[add_photo] –æ—Ç {call.from_user.id}")
    await call.answer()
    await state.set_state(AdminBroadcast.waiting_for_photo)
    await safe_edit_or_send(call, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")


@router.message(AdminBroadcast.waiting_for_photo, F.photo)
async def set_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    print(f"[set_photo] file_id={photo_id}")
    await state.update_data(broadcast_photo=photo_id)
    data = await state.get_data()

    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å —Ñ–æ—Ç–æ
    final_kb = build_final_keyboard(data.get("buttons", []))
    await message.answer_photo(photo_id, caption=f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data.get('broadcast_text') or ''}", reply_markup=final_kb)
    print("[set_photo] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å —Ñ–æ—Ç–æ")

    # –ú–µ–Ω—é –Ω–∏–∂–µ
    menu_kb = build_broadcast_menu(data)
    await message.answer("‚öôÔ∏è –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=menu_kb)
    print("[set_photo] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏")

    await state.set_state(AdminBroadcast.waiting_for_text)
    print("[set_photo] —Å–æ—Å—Ç–æ—è–Ω–∏–µ -> waiting_for_text")



# ==== –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ: —Å—Ä–∞–∑—É –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Ñ–æ—Ç–æ + –º–µ–Ω—é ====
@router.callback_query(F.data == "remove_broadcast_photo")
async def remove_photo(call: CallbackQuery, state: FSMContext):
    print(f"[remove_photo] –æ—Ç {call.from_user.id}")
    await call.answer()

    # 1) –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ state
    await state.update_data(broadcast_photo=None)
    data = await state.get_data()
    print(f"[remove_photo] —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω–æ. state={data}")

    # 2) –°—Ä–∞–∑—É —à–ª—ë–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–ï–ó —Ñ–æ—Ç–æ –∏ –Ω–∏–∂–µ ‚Äî –º–µ–Ω—é
    await render_preview_and_menu(call.message, data)

    # 3) –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—â–∏–π —Ä–µ–∂–∏–º)
    await state.set_state(AdminBroadcast.waiting_for_text)
    print("[remove_photo] —Å–æ—Å—Ç–æ—è–Ω–∏–µ -> waiting_for_text")



# ==== Helper: –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä + –º–µ–Ω—é (–±–µ–∑ —Ñ–æ—Ç–æ) ====
async def render_preview_and_menu(message: Message, data: dict):
    print(f"[render_preview_and_menu] data={data}")
    text = (data.get("broadcast_text") or "").strip()
    buttons = data.get("buttons", [])
    final_kb = build_final_keyboard(buttons)
    menu_kb = build_broadcast_menu(data)

    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Ñ–æ—Ç–æ
    await message.answer(f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}", reply_markup=final_kb)
    print("[render_preview_and_menu] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–±–µ–∑ —Ñ–æ—Ç–æ)")

    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
    await message.answer("‚öôÔ∏è –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=menu_kb)
    print("[render_preview_and_menu] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏")



# ============================ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ ============================

@router.callback_query(F.data == "setup_buttons")
async def setup_buttons(call: CallbackQuery, state: FSMContext):
    print(f"[setup_buttons] –æ—Ç {call.from_user.id}")
    await call.answer()
    data = await state.get_data()
    print(f"[setup_buttons] state={data}")
    buttons = data.get("buttons", [])
    kb = build_buttons_preview_kb(buttons)
    # –ü–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ, –∞ –ø–æ—Ç–æ–º ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await safe_edit_or_send(call, "‚öôÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫\n–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ. –î–æ–±–∞–≤—å—Ç–µ, —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ.")
    await call.message.answer("üìã –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=kb)


@router.callback_query(F.data == "add_button")
async def add_button(call: CallbackQuery, state: FSMContext):
    print(f"[add_button] –æ—Ç {call.from_user.id}")
    await call.answer()
    await state.set_state(AdminBroadcast.waiting_for_button_text)
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")


@router.message(AdminBroadcast.waiting_for_button_text)
async def button_text(message: Message, state: FSMContext):
    print(f"[button_text] text='{message.text}'")
    await state.update_data(current_button_text=message.text)
    await state.set_state(AdminBroadcast.waiting_for_button_url)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏ (http:// –∏–ª–∏ https://):")


@router.message(AdminBroadcast.waiting_for_button_url)
async def button_url(message: Message, state: FSMContext):
    url = (message.text or "").strip()
    print(f"[button_url] url='{url}'")
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å http:// –∏–ª–∏ https://")
        return

    data = await state.get_data()
    btn_text = (data.get("current_button_text") or "").strip()
    if not btn_text:
        print("[button_url] –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞—é –≤ waiting_for_text")
        await state.set_state(AdminBroadcast.waiting_for_text)
        await state.update_data(current_button_text=None)
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    buttons = data.get("buttons", [])
    buttons.append({"text": btn_text, "url": url})
    await state.update_data(buttons=buttons, current_button_text=None)
    print(f"[button_url] –¥–æ–±–∞–≤–ª–µ–Ω–æ: '{btn_text}' -> '{url}', –∏—Ç–æ–≥ –∫–Ω–æ–ø–æ–∫={len(buttons)}")

    kb = build_buttons_preview_kb(buttons)
    await message.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=kb)
    await state.set_state(AdminBroadcast.waiting_for_text)


@router.callback_query(F.data == "remove_button_prompt")
async def remove_button_prompt(call: CallbackQuery, state: FSMContext):
    print(f"[remove_button_prompt] –æ—Ç {call.from_user.id}")
    await call.answer()
    data = await state.get_data()
    buttons = data.get("buttons", [])
    print(f"[remove_button_prompt] –≤—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫={len(buttons)}")
    if not buttons:
        await call.message.answer("–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç.")
        return

    rows = []
    for idx, btn in enumerate(buttons):
        rows.append([InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {idx+1}. {btn.get('text','')}", callback_data=f"remove_button_{idx}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="setup_buttons")])

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))


@router.callback_query(F.data.startswith("remove_button_"))
async def remove_button(call: CallbackQuery, state: FSMContext):
    print(f"[remove_button] data='{call.data}'")
    await call.answer()
    idx_str = call.data.replace("remove_button_", "")
    try:
        idx = int(idx_str)
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    data = await state.get_data()
    buttons = data.get("buttons", [])
    if 0 <= idx < len(buttons):
        removed = buttons.pop(idx)
        await state.update_data(buttons=buttons)
        await call.message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ: {removed.get('text')}")
        print(f"[remove_button] —É–¥–∞–ª–µ–Ω–æ –∏–Ω–¥–µ–∫—Å={idx}, –æ—Å—Ç–∞–ª–æ—Å—å={len(buttons)}")
    else:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        print("[remove_button] –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        return

    kb = build_buttons_preview_kb(buttons)
    await call.message.answer("–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=kb)


@router.callback_query(F.data == "buttons_done")
async def buttons_done(call: CallbackQuery, state: FSMContext):
    print(f"[buttons_done] –æ—Ç {call.from_user.id}")
    await call.answer()
    data = await state.get_data()
    text = data.get("broadcast_text", "") or ""
    photo_id = data.get("broadcast_photo")
    final_kb = build_final_keyboard(data.get("buttons", []))
    menu_kb = build_broadcast_menu(data)

    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞ (–∫–∞–∫ —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    if photo_id:
        await call.message.answer_photo(photo_id, caption=f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}", reply_markup=final_kb)
        print("[buttons_done] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å —Ñ–æ—Ç–æ")
    else:
        await call.message.answer(f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}", reply_markup=final_kb)
        print("[buttons_done] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Ñ–æ—Ç–æ")

    # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await call.message.answer("‚öôÔ∏è –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=menu_kb)
    print("[buttons_done] –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    await state.set_state(AdminBroadcast.waiting_for_text)


# ============================ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ–π—á–∞—Å ============================

@router.callback_query(F.data == "send_broadcast_now")
async def send_now(call: CallbackQuery, state: FSMContext):
    print(f"[send_now] –æ—Ç {call.from_user.id}")
    await call.answer()

    # 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    text = data.get("broadcast_text")
    if not text:
        await call.message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    photo_id = data.get("broadcast_photo")
    buttons = data.get("buttons", [])
    markup = build_final_keyboard(buttons)

    # 2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.clear()

    # 3Ô∏è‚É£ –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∏–¥—ë—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞
    status = f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ({'—Å —Ñ–æ—Ç–æ' if photo_id else '—Ç–µ–∫—Å—Ç'})..."
    await safe_edit_or_send(call, status)

    # 4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    try:
        res = await send_broadcast_to_all_users(text, photo_id, call.from_user.id)
    except Exception as e:
        log_exc("[send_now] –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", e)
        res = None

    # 5Ô∏è‚É£ –†–∞–∑–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if isinstance(res, tuple) and len(res) >= 2:
        success, errors = res[0], res[1]
    elif isinstance(res, int):
        success, errors = res, 0
    else:
        success, errors = 0, 0

    delivered = (success or 0) + (errors or 0)
    pct = round((success / delivered) * 100, 1) if delivered > 0 else 0.0

    result_text = (
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}\n"
        f"üìä –î–æ—Å—Ç–∞–≤–∫–∞: {pct}%\n"
        f"üîò –ö–Ω–æ–ø–æ–∫: {len(buttons)}\n"
        f"üñº –§–æ—Ç–æ: {'–¥–∞' if photo_id else '–Ω–µ—Ç'}"
    )

    # 6Ô∏è‚É£ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    await call.message.answer(result_text, reply_markup=menu_kb)




# ============================ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ============================

@router.callback_query(F.data == "schedule_broadcast")
async def schedule_broadcast(call: CallbackQuery, state: FSMContext):
    print(f"[schedule_broadcast] –æ—Ç {call.from_user.id}")
    await call.answer()
    await state.set_state(AdminBroadcast.waiting_for_schedule_time)
    text = (
        "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "YYYY-MM-DD HH:MM\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-01-15 14:30"
    )
    try:
        await safe_edit_or_send(call, text)
    except Exception as e:
        log_exc("[schedule_broadcast] prompt failed", e)
        await call.message.answer(text)


@router.message(AdminBroadcast.waiting_for_schedule_time)
async def set_schedule_time(message: Message, state: FSMContext):
    raw = (message.text or "").strip()
    print(f"[set_schedule_time] raw='{raw}'")
    try:
        schedule_time = datetime.strptime(raw, "%Y-%m-%d %H:%M")
        if schedule_time <= datetime.now():
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
        return

    data = await state.get_data()
    text = data.get("broadcast_text")
    if not text:
        print("[set_schedule_time] –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()
        return

    photo_id = data.get("broadcast_photo")
    buttons = data.get("buttons", [])
    final_kb = build_final_keyboard(buttons)

    try:
        users = await get_all_users()
        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ë–î (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ)
        saved_count = 0
        for u in users:
            try:
                await save_scheduled_message(
                    u["user_id"],
                    text,
                    photo_id,
                    schedule_time.strftime("%Y-%m-%d %H:%M")
                )
                saved_count += 1
            except Exception as e:
                log_exc(f"[set_schedule_time] save_scheduled_message user_id={u.get('user_id')}", e)

        print(f"[set_schedule_time] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {saved_count}, run_date={schedule_time}")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º job –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        job_id = f"broadcast_{int(datetime.now().timestamp())}"
        if scheduler and getattr(scheduler, "scheduler", None):
            try:
                print("[set_schedule_time] –¥–æ–±–∞–≤–ª—è–µ–º job —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
                scheduler.scheduler.add_job(
                    send_scheduled_broadcast_with_stats,
                    "date",
                    run_date=schedule_time,
                    id=job_id,
                    args=[text, photo_id, message.from_user.id, final_kb]
                )
            except TypeError as e:
                log_exc("[set_schedule_time] add_job TypeError (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)", e)
                scheduler.scheduler.add_job(
                    send_scheduled_broadcast_with_stats,
                    "date",
                    run_date=schedule_time,
                    id=job_id,
                    args=[text, photo_id, message.from_user.id]
                )
            except Exception as e:
                log_exc("[set_schedule_time] add_job error", e)
        else:
            print("[set_schedule_time] ‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

        confirm = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {saved_count}\n"
            f"üñº –§–æ—Ç–æ: {'–¥–∞' if photo_id else '–Ω–µ—Ç'}\n"
            f"üîò –ö–Ω–æ–ø–æ–∫: {len(buttons)}"
        )
        await message.answer(confirm, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ]))
        print("[set_schedule_time] –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await state.clear()
        print("[set_schedule_time] state –æ—á–∏—â–µ–Ω")
    except Exception as e:
        log_exc("[set_schedule_time] –æ–±—â–∞—è –æ—à–∏–±–∫–∞", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        print("[set_schedule_time] state –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
