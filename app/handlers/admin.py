from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import os
import asyncio

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from app.database import (
    get_all_users, get_user_count, get_active_debts_count,
    save_scheduled_message
)
from app.states import AdminBroadcast
from app.utils.broadcast import send_broadcast_to_all_users, send_scheduled_broadcast_with_stats

router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


async def get_admin_stats_safely():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        user_count = 0
        active_debts = 0

        for attempt in range(3):
            try:
                user_count = await get_user_count()
                break
            except Exception as e:
                if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
                    user_count = 0
                else:
                    await asyncio.sleep(0.1)

        for attempt in range(3):
            try:
                active_debts = await get_active_debts_count()
                break
            except Exception as e:
                if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤: {e}")
                    active_debts = 0
                else:
                    await asyncio.sleep(0.1)

        return user_count, active_debts
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return 0, 0


@router.message(Command('admin'))
async def admin_panel(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await state.clear()
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_count, active_debts = await get_admin_stats_safely()

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({user_count})", callback_data="admin_users")],
        [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

    await message.answer(stats_text, reply_markup=kb)


@router.callback_query(F.data == "admin_users")
async def admin_users_list(call: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        users = await get_all_users()
        if not users:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for i, user in enumerate(users[:10], 1):
            text += f"{i}. ID: {user['user_id']}\n"
            text += f"   –Ø–∑—ã–∫: {user.get('lang', 'ru')}\n"
            text += f"   –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {user.get('notify_time', '09:00')}\n\n"

        if len(users) > 10:
            text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])

        await call.message.edit_text(text, reply_markup=kb)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state(AdminBroadcast.waiting_for_text)
    await call.message.edit_text(
        "üì¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
    )


@router.message(AdminBroadcast.waiting_for_text)
async def admin_broadcast_text(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    await state.update_data(broadcast_text=message.text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="add_broadcast_photo")],
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_broadcast_now")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
    ])

    await message.answer(
        f"üì¢ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )


@router.callback_query(F.data == "add_broadcast_photo")
async def admin_broadcast_add_photo(call: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state(AdminBroadcast.waiting_for_photo)
    await call.message.edit_text(
        "üì∑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )


@router.message(AdminBroadcast.waiting_for_photo, F.photo)
async def admin_broadcast_photo(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    await state.update_data(broadcast_photo=photo_id)

    data = await state.get_data()
    text = data.get('broadcast_text', '')

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_broadcast_now")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_broadcast")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="add_broadcast_photo")],
        [InlineKeyboardButton(text="üóë –£–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="remove_broadcast_photo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
    ])

    try:
        await message.answer_photo(
            photo_id,
            caption=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π:\n\n{text}\n\n‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–≤—å—é: {e}")
        await message.answer(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π:\n\n{text}\n\n‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb
        )


@router.message(AdminBroadcast.waiting_for_photo)
async def admin_broadcast_photo_invalid(message: Message, state: FSMContext):
    """–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É (—Ñ–æ—Ç–æ)!\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    )


@router.callback_query(F.data == "remove_broadcast_photo")
async def admin_broadcast_remove_photo(call: CallbackQuery, state: FSMContext):
    """–£–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.update_data(broadcast_photo=None)
    data = await state.get_data()
    text = data.get('broadcast_text', '')

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="add_broadcast_photo")],
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_broadcast_now")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
    ])

    await call.message.edit_text(
        f"üì¢ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{text}\n\nüóë –ö–∞—Ä—Ç–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )


from aiogram.exceptions import TelegramBadRequest

@router.callback_query(F.data == "send_broadcast_now")
async def admin_broadcast_send_now(call: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–µ–π—á–∞—Å"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    text = data['broadcast_text']
    photo_id = data.get('broadcast_photo')
    admin_id = call.from_user.id

    broadcast_type = "—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" if photo_id else "—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        if call.message.text:
            await call.message.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ({broadcast_type})...")
        elif call.message.caption:
            await call.message.edit_caption(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ({broadcast_type})...")
        else:
            await call.message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ({broadcast_type})...")
    except TelegramBadRequest:
        await call.message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ({broadcast_type})...")

    try:
        success, errors, blocked_users = await send_broadcast_to_all_users(text, photo_id, admin_id)

        result_text = f"""‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}
‚ùå –û—à–∏–±–æ–∫: {errors}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {round((success/(success+errors))*100, 1) if (success+errors) > 0 else 0}%

üìù –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_type}"""

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        try:
            if call.message.text:
                await call.message.edit_text(result_text, reply_markup=kb)
            elif call.message.caption:
                await call.message.edit_caption(result_text, reply_markup=kb)
            else:
                await call.message.answer(result_text, reply_markup=kb)
        except TelegramBadRequest:
            await call.message.answer(result_text, reply_markup=kb)

        await state.clear()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        error_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            if call.message.text:
                await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=error_kb)
            elif call.message.caption:
                await call.message.edit_caption("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=error_kb)
            else:
                await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=error_kb)
        except TelegramBadRequest:
            await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=error_kb)

        await state.clear()


@router.callback_query(F.data == "schedule_broadcast")
async def admin_broadcast_schedule(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state(AdminBroadcast.waiting_for_schedule_time)

    try:
        await call.message.edit_text(
            "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "YYYY-MM-DD HH:MM\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15 14:30"
        )
    except:
        await call.message.answer(
            "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "YYYY-MM-DD HH:MM\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15 14:30"
        )


@router.message(AdminBroadcast.waiting_for_schedule_time)
async def admin_broadcast_schedule_time(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    try:
        schedule_time = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
        if schedule_time <= datetime.now():
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
        return

    data = await state.get_data()
    text = data['broadcast_text']
    photo_id = data.get('broadcast_photo')

    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_all_users()

        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        saved_count = 0
        for user in users:
            try:
                await save_scheduled_message(
                    user['user_id'],
                    text,
                    photo_id,
                    schedule_time.strftime('%Y-%m-%d %H:%M')
                )
                saved_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        from app.utils.scheduler import scheduler
        job_id = f"broadcast_{datetime.now().timestamp()}"
        scheduler.scheduler.add_job(
            send_scheduled_broadcast_with_stats,
            'date',
            run_date=schedule_time,
            id=job_id,
            args=[text, photo_id, message.from_user.id]
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])

        broadcast_type = "—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π" if photo_id else "—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"
        confirm_text = f"""‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}

üìä –î–µ—Ç–∞–ª–∏:
üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {saved_count}
üìù –¢–∏–ø: {broadcast_type}"""

        await message.answer(confirm_text, reply_markup=kb)
        await state.clear()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()


@router.callback_query(F.data == "admin_stats")
async def admin_stats(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_count, active_debts = await get_admin_stats_safely()

    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}
üìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}
"""

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

    await call.message.edit_text(stats_text, reply_markup=kb)


@router.callback_query(F.data == "admin_back")
async def admin_back(call: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.clear()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_count, active_debts = await get_admin_stats_safely()

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({user_count})", callback_data="admin_users")],
        [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

    try:
        await call.message.edit_text(stats_text, reply_markup=kb)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await call.message.answer(stats_text, reply_markup=kb)