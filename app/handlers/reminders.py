from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime
from aiogram.exceptions import TelegramBadRequest

from app.database.connection import get_db
from app.database.crud import (
    add_reminder, get_user_reminders,
    get_user_data, enable_debt_reminders, disable_debt_reminders,
    set_debt_reminder_time, update_reminder_text, create_currency_reminder,
    delete_currency_reminders, get_reminder_by_id, set_user_currency_time, get_user_currency_time
)
from app.keyboards.texts import tr
from app.keyboards.callbacks import CallbackData, DynamicCallbacks

router = Router()


# --- –•–µ–ª–ø–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
async def safe_edit_text(message, text: str, reply_markup=None) -> bool:
    try:
        await message.edit_text(text, reply_markup=reply_markup)
        return True
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            print("[LOG] safe_edit_text: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        raise


# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class ReminderForm(StatesGroup):
    text = State()
    due = State()
    repeat = State()


class ReminderEditForm(StatesGroup):
    text = State()


class DebtReminderForm(StatesGroup):
    time = State()


# --- –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã ---
def cancel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CallbackData.REMINDERS_MENU)]]
    )


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminders_main_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì• " + await tr(user_id, "debts_btn"),
                                  callback_data=CallbackData.DEBT_REMINDERS)],
            [InlineKeyboardButton(text="üí± " + await tr(user_id, "currency_btn"),
                                  callback_data=CallbackData.CURRENCY_REMINDERS)],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=CallbackData.ADD_REMINDER)],
            [InlineKeyboardButton(text="üìã " + await tr(user_id, "my_reminders_btn"),
                                  callback_data=CallbackData.MY_REMINDERS)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è " + await tr(user_id, "back_btn"),
                                  callback_data=CallbackData.BACK_MAIN)],
        ]
    )


@router.callback_query(F.data == CallbackData.REMINDERS_MENU)
async def open_reminders_menu(callback: CallbackQuery):
    async with get_db() as session:
        user_id = callback.from_user.id
        user_data = await get_user_data(user_id)

        # --- –î–æ–ª–≥–∏ ---
        debt_time = user_data.get("notify_time")
        print(debt_time)
        debt_text = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤ –≤ {debt_time}" if debt_time else "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–ª–≥–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã"

        # --- –í–∞–ª—é—Ç–∞ ---
        currency_time = await get_user_currency_time(session, user_id)
        print("currency_time:", currency_time)
        currency_text = f"‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {currency_time}" if currency_time else "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç –≤—ã–∫–ª—é—á–µ–Ω—ã"

        # --- –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç ---
        text = f"{debt_text}\n{currency_text}"

        kb = await reminders_main_kb(user_id)

        try:
            await callback.message.edit_text(text, reply_markup=kb)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                pass
            else:
                raise

        await callback.answer()




# --- –î–æ–ª–≥–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@router.callback_query(F.data == CallbackData.DEBT_REMINDERS)
async def open_debt_reminders(callback: CallbackQuery):
    # –û–°–¢–ê–í–õ–Ø–Æ –¢–í–û–Æ –ö–†–ê–°–ò–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£, –ù–ï –ú–ï–ù–Ø–Æ –†–ê–ó–ú–ï–¢–ö–£
    kb = await debt_reminders_kb(callback.from_user.id)  # –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é/–∫–ª–∞–≤—É –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ
    text = await tr(callback.from_user.id, "debt_reminders_text")  # –∏–ª–∏ —Ç–≤–æ–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –±—ã–ª–æ

    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise

    await callback.answer()

@router.callback_query(F.data == CallbackData.TOGGLE_DEBT_REMINDERS)
async def toggle_debt_reminders(callback: CallbackQuery):
    user_data = await get_user_data(callback.from_user.id)
    enabled_now = user_data.get("notify_time") is not None

    async with get_db() as session:
        if enabled_now:
            await disable_debt_reminders(session, callback.from_user.id)
            print(f"[LOG] –í—ã–∫–ª—é—á–µ–Ω—ã –¥–æ–ª–≥–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è user={callback.from_user.id}")
        else:
            await enable_debt_reminders(session, callback.from_user.id, default_time="09:00")
            print(f"[LOG] –í–∫–ª—é—á–µ–Ω—ã –¥–æ–ª–≥–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è user={callback.from_user.id}, –≤—Ä–µ–º—è=09:00")

    await open_debt_reminders(callback)


@router.callback_query(F.data == CallbackData.SETUP_REMINDER_TIME)
async def setup_reminder_time(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)", reply_markup=cancel_kb())
    await state.set_state(DebtReminderForm.time)
    print(f"[LOG] –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–≥–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è user={callback.from_user.id}")
    await callback.answer()


@router.message(DebtReminderForm.time)
async def process_debt_time(message: types.Message, state: FSMContext):
    if message.text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        await state.clear()
        print(f"[LOG] –û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–≥–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è user={message.from_user.id}")
        await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    try:
        t = datetime.strptime(message.text.strip(), "%H:%M").time()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        return

    async with get_db() as session:
        await set_debt_reminder_time(session, message.from_user.id, t.strftime("%H:%M"))
        print(f"[LOG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –¥–æ–ª–≥–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è user={message.from_user.id}, time={t.strftime('%H:%M')}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª –≤ –º–µ–Ω—é –¥–æ–ª–≥–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackData.DEBT_REMINDERS)]
        ]
    )

    await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {t.strftime('%H:%M')}", reply_markup=kb)
    await state.clear()



# --- –í–∞–ª—é—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@router.callback_query(F.data == CallbackData.CURRENCY_REMINDERS)
async def open_currency_reminders(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåÖ –£—Ç—Ä–æ (07:00)", callback_data=CallbackData.ENABLE_MORNING_RATES)],
            [InlineKeyboardButton(text="üåÜ –í–µ—á–µ—Ä (17:00)", callback_data=CallbackData.ENABLE_EVENING_RATES)],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=CallbackData.DISABLE_CURRENCY_RATES)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackData.REMINDERS_MENU)],
        ]
    )
    print(f"[LOG] –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤–∞–ª—é—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è user={callback.from_user.id}")
    await safe_edit_text(callback.message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data == CallbackData.ENABLE_MORNING_RATES)
async def enable_morning_rates(callback: CallbackQuery):
    async with get_db() as session:
        await set_user_currency_time(session, callback.from_user.id, "07:00")
    await callback.answer("üåÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 07:00")
    await open_currency_reminders(callback)

@router.callback_query(F.data == CallbackData.ENABLE_EVENING_RATES)
async def enable_evening_rates(callback: CallbackQuery):
    async with get_db() as session:
        await set_user_currency_time(session, callback.from_user.id, "17:00")
    await callback.answer("üåÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 17:00")
    await open_currency_reminders(callback)

@router.callback_query(F.data == CallbackData.DISABLE_CURRENCY_RATES)
async def disable_currency_rates(callback: CallbackQuery):
    async with get_db() as session:
        await set_user_currency_time(session, callback.from_user.id, None)
    await callback.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    await open_currency_reminders(callback)




# --- –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@router.callback_query(F.data == CallbackData.MY_REMINDERS)
async def open_my_reminders(callback: CallbackQuery):
    async with get_db() as session:
        reminders = await get_user_reminders(session, callback.from_user.id)

    if not reminders:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
    else:
        text = "–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"

    kb_rows = []
    for r in reminders:
        kb_rows.append([
            InlineKeyboardButton(
                text=f"‚è∞ {r.text}",
                callback_data=DynamicCallbacks.reminder_action("view", r.id)
            )
        ])

    kb_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackData.REMINDERS_MENU)])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    print(f"[LOG] –û—Ç–∫—Ä—ã—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è user={callback.from_user.id}, count={len(reminders)})")
    await safe_edit_text(callback.message, text, reply_markup=kb)
    await callback.answer()


# --- –ü–∞—Ä—Å–µ—Ä callback-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def parse_reminder_callback(data: str):
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: reminder_view_<id> / reminder_edit_<id> / reminder_delete_<id>
    if not data.startswith("reminder_"):
        return None, None
    try:
        _, action, rid = data.split("_", 2)
        return action, int(rid)
    except Exception:
        return None, None


# --- –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø—Ä–æ—Å–º–æ—Ç—Ä/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ) ---
@router.callback_query(F.data.startswith("reminder_"))
async def reminder_card_handler(callback: CallbackQuery, state: FSMContext):
    action, rid = parse_reminder_callback(callback.data)
    if not action or not rid:
        await callback.answer()
        return

    user_id = callback.from_user.id

    if action == "view":
        async with get_db() as session:
            r = await get_reminder_by_id(session, rid, user_id)
        if not r:
            await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        repeat_text = {"none": "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞", "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "monthly": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"}.get(r.repeat, r.repeat)
        text = f"‚è∞ {r.text}\nüïí {r.due}\nüîÅ {repeat_text}"

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=DynamicCallbacks.reminder_action("edit", rid)),
                    InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=DynamicCallbacks.reminder_action("delete", rid)),
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackData.MY_REMINDERS)]
            ]
        )
        print(f"[LOG] –û—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è id={rid} –¥–ª—è user={user_id}")
        await safe_edit_text(callback.message, text, reply_markup=kb)
        await callback.answer()

    elif action == "edit":
        await state.update_data(reminder_id=rid)
        print(f"[LOG] –ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è id={rid} –¥–ª—è user={user_id}")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª")
        await state.set_state(ReminderEditForm.text)
        await callback.answer("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

    elif action == "delete":
        async with get_db() as session:
            r = await get_reminder_by_id(session, rid, user_id)
            if r:
                await session.delete(r)
                await session.commit()
                print(f"[LOG] –£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ id={rid} –¥–ª—è user={user_id}")

        await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
        await open_my_reminders(callback)


# --- FSM —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
# BEGIN PATCH: back button after reminder edit
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(ReminderEditForm.text)
async def edit_text(message: types.Message, state: FSMContext):
    if message.text.lower().strip() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    data = await state.get_data()
    rid = data.get("reminder_id")
    if not rid:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    async with get_db() as session:
        r = await update_reminder_text(session, rid, message.from_user.id, message.text.strip())

    if not r:
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤ "–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    back_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackData.MY_REMINDERS)]
        ]
    )
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=back_kb)
    await state.clear()
# END PATCH



# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø–æ–ª–Ω—ã–π FSM + –æ—Ç–º–µ–Ω–∞ + –ª–æ–≥–∏) ---
@router.callback_query(F.data == CallbackData.ADD_REMINDER)
async def start_add_reminder(callback: CallbackQuery, state: FSMContext):
    print(f"[LOG] ADD_REMINDER: –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ, user={callback.from_user.id}")
    # –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å edit_text
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CallbackData.REMINDERS_MENU)]]
    ))
    await state.set_state(ReminderForm.text)
    print(f"[LOG] ADD_REMINDER: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω state=ReminderForm.text, user={callback.from_user.id}")
    await callback.answer()


@router.message(ReminderForm.text)
async def process_text(message: types.Message, state: FSMContext):
    print(f"[LOG] ADD_REMINDER[TEXT]: –≤—Ö–æ–¥, user={message.from_user.id}, text={message.text!r}")
    if message.text.lower().strip() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        await state.clear()
        print(f"[LOG] ADD_REMINDER[TEXT]: –æ—Ç–º–µ–Ω–∞, user={message.from_user.id}")
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    text = message.text.strip()
    if not text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CallbackData.REMINDERS_MENU)]]
        ))
        return

    await state.update_data(text=text)
    print(f"[LOG] ADD_REMINDER[TEXT]: —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–µ–∫—Å—Ç, user={message.from_user.id}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CallbackData.REMINDERS_MENU)]]
    ))
    await state.set_state(ReminderForm.due)
    print(f"[LOG] ADD_REMINDER: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω state=ReminderForm.due, user={message.from_user.id}")


@router.message(ReminderForm.due)
async def process_due(message: types.Message, state: FSMContext):
    print(f"[LOG] ADD_REMINDER[DUE]: –≤—Ö–æ–¥, user={message.from_user.id}, due_text={message.text!r}")
    if message.text.lower().strip() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        await state.clear()
        print(f"[LOG] ADD_REMINDER[DUE]: –æ—Ç–º–µ–Ω–∞, user={message.from_user.id}")
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    try:
        due = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: YYYY-MM-DD HH:MM", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CallbackData.REMINDERS_MENU)]]
        ))
        return

    await state.update_data(due=due)
    print(f"[LOG] ADD_REMINDER[DUE]: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è={due.isoformat(' ')}, user={message.from_user.id}")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞", callback_data=CallbackData.REPEAT_NO)],
            [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data=CallbackData.REPEAT_DAILY)],
            [InlineKeyboardButton(text="–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data=CallbackData.REPEAT_MONTHLY)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackData.REMINDERS_MENU)],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä", reply_markup=kb)
    await state.set_state(ReminderForm.repeat)
    print(f"[LOG] ADD_REMINDER: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω state=ReminderForm.repeat, user={message.from_user.id}")


@router.callback_query(
    F.data.in_({CallbackData.REPEAT_NO, CallbackData.REPEAT_DAILY, CallbackData.REPEAT_MONTHLY}),
    ReminderForm.repeat
)
async def process_repeat_cb(callback: CallbackQuery, state: FSMContext):
    repeat_map = {
        CallbackData.REPEAT_NO: "none",
        CallbackData.REPEAT_DAILY: "daily",
        CallbackData.REPEAT_MONTHLY: "monthly",
    }
    repeat = repeat_map.get(callback.data, "none")

    data = await state.get_data()
    text = data.get("text")
    due = data.get("due")

    print(f"[LOG] ADD_REMINDER[REPEAT]: –≤—Ö–æ–¥, user={callback.from_user.id}, repeat={repeat}, data_present={bool(text and due)}")

    if not text or not due:
        await state.clear()
        print(f"[LOG] ADD_REMINDER[REPEAT]: –Ω–µ—Ç text/due –≤ state, user={callback.from_user.id}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    async with get_db() as session:
        r = await add_reminder(session, user_id=callback.from_user.id, text=text, due=due, repeat=repeat)

    print(f"[LOG] ADD_REMINDER: —Å–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ id={getattr(r, 'id', None)}, user={callback.from_user.id}, repeat={repeat}, due={due.isoformat(' ')}")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackData.REMINDERS_MENU)]
        ]
    )
    repeat_human = "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞" if repeat == "none" else ("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" if repeat == "daily" else "–ï–∂–µ–º–µ—Å—è—á–Ω–æ")
    await safe_edit_text(
        callback.message,
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ\n\nüìù {text}\nüïí {due}\nüîÅ {repeat_human}",
        reply_markup=kb
    )
    await state.clear()
    await callback.answer()

async def debt_reminders_kb(user_id: int) -> InlineKeyboardMarkup:
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –¥–æ–ª–≥–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª—é—á–∏—Ç—å",
    –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã ‚Äî "–í–∫–ª—é—á–∏—Ç—å".
    """
    user_data = await get_user_data(user_id)
    enabled = user_data.get("notify_time") is not None

    toggle_text = "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" if enabled else "‚è∞ –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=toggle_text, callback_data=CallbackData.TOGGLE_DEBT_REMINDERS)],
            [InlineKeyboardButton(text="‚öô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data=CallbackData.SETUP_REMINDER_TIME)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CallbackData.REMINDERS_MENU)],
        ]
    )
    return kb
