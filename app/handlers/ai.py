import os
import json
from datetime import datetime, timezone, timedelta

import httpx
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from pydantic import BaseModel, Field, ValidationError, field_validator
from dateutil.parser import isoparse

from app import config
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.database import crud
from app.keyboards.callbacks import CallbackData
from app.keyboards.keyboards import main_menu
import re

router = Router()

DEESEEK_API_KEY = config.DEESEEK_API_KEY
DEESEEK_API_URL = config.DEESEEK_API_URL or "https://api.deepseek.com/v1/chat/completions"

# -----------------------------
# Pydantic schema –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –æ—Ç –ò–ò
# -----------------------------

cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CallbackData.BACK)]
])

exit_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data=CallbackData.BACK)]
])
class DebtAI(BaseModel):
    who_owes: str = Field(..., description="me | i")
    counterparty_name: str
    amount: float
    currency: str
    due_date: str
    description: str | None = ""

    @field_validator("who_owes")
    def valid_who_owes(cls, v):
        if v not in {"me", "i"}:
            raise ValueError("who_owes must be 'me' or 'i'")
        return v

    @field_validator("counterparty_name")
    def non_empty_counterparty(cls, v):
        if not v or not v.strip():
            raise ValueError("counterparty_name required")
        return v.strip()

    @field_validator("amount")
    def positive_amount(cls, v):
        if v is None or v <= 0:
            raise ValueError("amount must be > 0")
        return v

    @field_validator("currency")
    def currency_in_list(cls, v):
        allowed = {"USD", "EUR", "UZS"}
        v2 = v.strip().upper()
        if v2 not in allowed:
            raise ValueError(f"currency must be one of {allowed}")
        return v2

    @field_validator("due_date")
    def iso_date(cls, v):
        try:
            isoparse(v)
        except Exception:
            raise ValueError("due_date must be ISO YYYY-MM-DD")
        return datetime.fromisoformat(v.replace("Z","")).date().isoformat()


# -----------------------------
# –í—ã–∑–æ–≤ DeepSeek
# -----------------------------
def extract_json(content: str) -> str:
    """–£–±–∏—Ä–∞–µ–º ```json ... ``` –æ–±—ë—Ä—Ç–∫—É, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—ë –≤–µ—Ä–Ω—É–ª–∞"""
    cleaned = re.sub(r"^```[a-zA-Z]*\n?", "", content.strip())
    cleaned = re.sub(r"```$", "", cleaned.strip())
    return cleaned.strip()

async def call_deepseek(user_text: str) -> dict | None:
    today = datetime.now().date().isoformat()

    system_prompt = (
        f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∑–∞–ø–∏—Å—è–º. –í–æ–∑—å–º–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ) –∏ –≤–µ—Ä–Ω–∏ –°–¢–†–û–ì–û JSON —Å –ø–æ–ª—è–º–∏:\n"
        "- who_owes: me –∏–ª–∏ i\n"
        "- counterparty_name: —Å—Ç—Ä–æ–∫–∞\n"
        "- amount: —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0\n"
        "- currency: –æ–¥–Ω–æ –∏–∑ USD, EUR, UZS\n"
        "- due_date: –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n"
        "- description: —Å—Ç—Ä–æ–∫–∞\n\n"
        f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today}. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é), "
        "–≤—Å–µ–≥–¥–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –∏—Ö –≤ –∞–±—Å–æ–ª—é—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.\n\n"
        "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å—Ç–∞–≤—å null, –Ω–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π JSON. "
        "–ù–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–æ–ª—å–∫–æ JSON."
    )

    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ DeepSeek...")
    print("‚û°Ô∏è User text:", user_text)

    async with httpx.AsyncClient(timeout=30) as client:
        resp = await client.post(
            DEESEEK_API_URL,
            headers={
                "Authorization": f"Bearer {DEESEEK_API_KEY}",
                "HTTP-Referer": "https://yourdomain.com",
                "X-Title": "DebtBot"
            },
            json={
                "model": "deepseek/deepseek-chat",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_text}
                ],
                "temperature": 0.2
            }
        )
        print("üì• –û—Ç–≤–µ—Ç –æ—Ç API:", resp.status_code)
        resp.raise_for_status()
        data = resp.json()
        print("üì¶ JSON –æ—Ç API:", json.dumps(data, ensure_ascii=False, indent=2))

        content = data["choices"][0]["message"]["content"]
        print("üìù –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –º–æ–¥–µ–ª–∏:", content)

        try:
            cleaned = extract_json(content)
            print("üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:", cleaned)
            parsed = json.loads(cleaned)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON:", parsed)
            return parsed
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e)
            return None


# -----------------------------
# Helpers
# -----------------------------
def natural_to_date(text: str) -> str:
    try:
        isoparse(text)
        return datetime.fromisoformat(text.replace("Z","")).date().isoformat()
    except Exception:
        return (datetime.now(timezone.utc) + timedelta(days=14)).date().isoformat()

def normalize_fields(parsed: dict) -> dict:
    print("üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π:", parsed)
    out = dict(parsed)
    if "currency" in out and out["currency"]:
        out["currency"] = str(out["currency"]).upper()
    if "due_date" in out and out["due_date"]:
        out["due_date"] = natural_to_date(str(out["due_date"]))
    print("‚úÖ –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:", out)
    return out


# -----------------------------
# Callback handler
# -----------------------------
@router.callback_query(F.data == CallbackData.AI_DEBT_ADD)
async def add_debt_ai_callback(call: CallbackQuery):
    print("üì≤ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ AI_DEBT_ADD")
    await call.answer()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:\n"
        "- –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (‚Äò—è –¥–æ–ª–∂–µ–Ω‚Äô –∏–ª–∏ ‚Äò–º–Ω–µ –¥–æ–ª–∂–Ω—ã‚Äô)\n"
        "- –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (–∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ)\n"
        "- —Å—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250 USD)\n"
        "- —Å—Ä–æ–∫ (YYYY-MM-DD)\n"
        "- –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        reply_markup=cancel_kb
    )

@router.callback_query(F.data == CallbackData.BACK)
async def back_to_main(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer()
    markup = await main_menu(call.from_user.id)   # ‚úÖ –ø–µ—Ä–µ–¥–∞—ë–º user_id
    await call.message.answer(
        "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=markup
    )





# -----------------------------
# Message handler
# -----------------------------
@router.message()
async def ai_message_handler(m: Message):
    print("üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", m.text)

    parsed = await call_deepseek(m.text)
    if not parsed:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—â–µ.", reply_markup=cancel_kb)
        return

    parsed = normalize_fields(parsed)

    try:
        debt = DebtAI(**parsed)
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞:", debt)
    except ValidationError as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", e.errors())
        errors = [f"{'.'.join(map(str, err['loc']))}: {err['msg']}" for err in e.errors()]
        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—â–µ: —è –¥–æ–ª–∂–µ–Ω –ò–≤–∞–Ω—É 100 USD –¥–æ YYYY-MM-DD ", reply_markup=cancel_kb )
        return

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º JSON –ø–æ–¥ —Ç–≤–æ—é –º–æ–¥–µ–ª—å Debt ---
    debt_json = {
        "user_id": m.from_user.id,
        "person": debt.counterparty_name,
        "amount": int(debt.amount),
        "currency": debt.currency,
        "direction": "owed" if debt.who_owes == "me" else "owe",
        "date": datetime.utcnow().date().isoformat(),
        "due": debt.due_date,
        "comment": debt.description or ""
    }
    print("üì¶ –ì–æ—Ç–æ–≤—ã–π debt_json:", debt_json)

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ CRUD ---
    new_debt = await crud.create_debt_from_ai(debt_json)
    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", new_debt)

    if new_debt:
        await m.answer(
            "‚úÖ –î–æ–ª–≥ –∑–∞–ø–∏—Å–∞–Ω:\n"
            f"- –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {new_debt['person']}\n"
            f"- –°—É–º–º–∞: {new_debt['amount']} {new_debt['currency']}\n"
            f"- –°—Ä–æ–∫: {new_debt['due']}\n"
            f"- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–º–Ω–µ –¥–æ–ª–∂–Ω—ã' if new_debt['direction']=='owed' else '—è –¥–æ–ª–∂–µ–Ω'}\n"
            f"- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {new_debt['comment'] or '‚Äî'}",
            reply_markup=exit_kb
        )
    else:
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞", reply_markup=cancel_kb)
