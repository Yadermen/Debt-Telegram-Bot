"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

try:
    from ..keyboards import tr, CallbackData
    from ..utils import safe_edit_message
    from app.utils.currency_api import format_currency_notification, convert_currency
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ currency.py: {e}")

router = Router()


# FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
class CurrencyFSM(StatesGroup):
    waiting_for_amount = State()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º"
async def back_to_currency_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=await tr(user_id, "back"), callback_data=CallbackData.CURRENCY_RATES)]]
    )


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
@router.callback_query(F.data == CallbackData.CURRENCY_RATES)
async def show_currency_menu(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    user_id = call.from_user.id
    await state.clear()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫—É—Ä—Å–∞–º–∏
        currency_message = await format_currency_notification(user_id, tr)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="UZS ‚Üí USD", callback_data="convert_uzs_usd"),
             InlineKeyboardButton(text="USD ‚Üí UZS", callback_data="convert_usd_uzs")],
            [InlineKeyboardButton(text="UZS ‚Üí EUR", callback_data="convert_uzs_eur"),
             InlineKeyboardButton(text="EUR ‚Üí UZS", callback_data="convert_eur_uzs")],
            [InlineKeyboardButton(text="UZS ‚Üí RUB", callback_data="convert_uzs_rub"),
             InlineKeyboardButton(text="RUB ‚Üí UZS", callback_data="convert_rub_uzs")],
            [InlineKeyboardButton(text=await tr(user_id, "back_main_btn"), callback_data=CallbackData.BACK_MAIN)]
        ])

        await safe_edit_message(call, currency_message, kb)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_currency_menu: {e}")
        error_text = await tr(user_id, 'currency_error')
        await safe_edit_message(call, error_text, await back_to_currency_kb(call.from_user.id))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("convert_"))
async def ask_for_amount(call: CallbackQuery, state: FSMContext):
    direction = call.data.replace("convert_", "")
    await state.set_state(CurrencyFSM.waiting_for_amount)
    await state.update_data(direction=direction)

    # call.answer() —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await call.answer()

    await call.message.answer(
        await tr(call.from_user.id, "enter_amount"),
        reply_markup=await back_to_currency_kb(call.from_user.id)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@router.message(CurrencyFSM.waiting_for_amount)
async def process_conversion(message: Message, state: FSMContext):
    data = await state.get_data()
    direction = data.get("direction")

    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer(await tr(message.from_user.id, "invalid_number_prompt"), reply_markup=await back_to_currency_kb(message.from_user.id))
        return

    result = await convert_currency(direction, amount)
    if result is None:
        await message.answer(await tr(message.from_user.id, "conversion_error"), reply_markup=await back_to_currency_kb(message.from_user.id))
        await state.clear()
        return

    from_curr, to_curr = direction.upper().split("_")

    await message.answer(
        f"üí± {amount} {from_curr} = {result:.2f} {to_curr}",
        reply_markup=await back_to_currency_kb(message.from_user.id)
    )
    await state.clear()
