# app/handlers/export.py
from aiogram import types, Router, F
from aiogram.types import BufferedInputFile, InputMediaDocument, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.connection import get_db
from app.utils.export_utils import export_user_debts_to_excel, get_export_filename
from app.keyboards.callbacks import CallbackData
from app.keyboards.texts import tr
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == CallbackData.EXPORT_EXCEL)
async def export_debts_callback(callback_query: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–ª–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel"""
    user_id = callback_query.from_user.id

    # 1. –°—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
    try:
        await callback_query.answer()
    except Exception as e:
        logger.warning(f"call.answer() error for user {user_id}: {e}")

    # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    try:
        loading_text = await tr(user_id, 'export_loading')
    except Exception:
        loading_text = "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."
    try:
        await callback_query.message.edit_text(loading_text, reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    try:
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        async with get_db() as session:  # type: AsyncSession
            excel_buffer = await export_user_debts_to_excel(session, user_id)
        filename = get_export_filename(user_id)
        file = BufferedInputFile(excel_buffer.getvalue(), filename)

        try:
            caption = await tr(user_id, 'export_success_caption')
        except Exception:
            caption = "üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\nüìù –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏."

        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        try:
            back_main_text = await tr(user_id, 'back_main_btn')
        except Exception:
            back_main_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

        back_main_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=back_main_text, callback_data="back_main")]
            ]
        )

        # 4. –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ñ–∞–π–ª —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        await callback_query.message.edit_media(
            media=InputMediaDocument(
                media=file,
                caption=caption
            ),
            reply_markup=back_main_kb
        )

        logger.info(f"Excel export successful for user {user_id}")

    except Exception as e:
        logger.error(f"Export error for user {user_id}: {e}", exc_info=True)
        try:
            error_text = await tr(user_id, 'export_error')
        except Exception:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        try:
            back_main_text = await tr(user_id, 'back_main_btn')
        except Exception:
            back_main_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

        back_main_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=back_main_text, callback_data="back_main")]
            ]
        )

        try:
            await callback_query.message.edit_text(error_text, reply_markup=back_main_kb)
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e2}")
