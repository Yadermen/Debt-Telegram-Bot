"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–æ–ª–≥–æ–≤
–í–∫–ª—é—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""
from typing import Dict, Optional
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from app.database.crud import get_open_debts, get_user_data
from app.keyboards import CallbackData
from app.utils.currency_api import CurrencyService
from app.keyboards.texts import tr
from app.utils import safe_edit_message

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
router = Router()

# –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
MONTHS_RU = {
    1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
    5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
    9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
}

# –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º
MONTHS_UZ = {
    1: "yanvar", 2: "fevral", 3: "mart", 4: "aprel",
    5: "may", 6: "iyun", 7: "iyul", 8: "avgust",
    9: "sentabr", 10: "oktabr", 11: "noyabr", 12: "dekabr"
}


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def get_month_name(month: int, lang: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
    if lang == "uz":
        return MONTHS_UZ.get(month, str(month))
    return MONTHS_RU.get(month, str(month))


# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

async def get_statistics_keyboard(user_id: int, current_currency: str = "USD") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üá∏ USD", callback_data="stats_currency_USD"),
            InlineKeyboardButton(text="üá™üá∫ EUR", callback_data="stats_currency_EUR"),
            InlineKeyboardButton(text="üá∫üáø UZS", callback_data="stats_currency_UZS")
        ],
        [
            InlineKeyboardButton(
                text=f"{await tr(user_id, 'statistics_btn_export')}",
                callback_data=CallbackData.EXPORT_EXCEL
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{await tr(user_id, 'statistics_btn_back')}",
                callback_data=CallbackData.BACK_MAIN
            )
        ]
    ])

    return keyboard


# ==================== –°–ï–†–í–ò–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====================

class StatisticsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–≥–æ–≤"""

    @staticmethod
    async def calculate_statistics(user_id: int, target_currency: str = "USD") -> Optional[Dict]:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–ª–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_currency: –í–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (USD, EUR, UZS)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            from app.database.connection import get_db
            from app.database.models import Debt
            from sqlalchemy import select, func, and_

            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ)
            async with get_db() as session:
                result = await session.execute(
                    select(Debt).where(
                        and_(
                            Debt.user_id == user_id,
                            Debt.is_active.is_(True)
                        )
                    ).order_by(Debt.id)
                )
                debt_rows = result.scalars().all()

                debts = []
                for debt in debt_rows:
                    debts.append({
                        'id': debt.id,
                        'amount': debt.amount,
                        'currency': debt.currency,
                        'direction': debt.direction,
                        'date': debt.date,
                        'closed': debt.closed
                    })

            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            rates = await CurrencyService.get_exchange_rates()
            if not rates:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return None

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            total_owe = 0.0  # –°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω —è (direction='owe')
            total_owed = 0.0  # –°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω—ã –º–Ω–µ (direction='owed')
            open_count = 0

            # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –¥–æ–ª–≥–æ–≤
            now = datetime.now()

            for debt in debts:
                amount = debt['amount']
                currency = debt.get('currency', 'UZS')
                direction = debt['direction']
                closed = debt.get('closed', False)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
                converted_amount = await StatisticsService._convert_to_target(
                    amount, currency, target_currency, rates
                )

                if converted_amount is None:
                    continue

                # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ–ª–≥–∏ (closed=False)
                if not closed:
                    if direction == 'owe':
                        # –Ø –¥–æ–ª–∂–µ–Ω
                        total_owe += converted_amount
                        open_count += 1
                    elif direction == 'owed':
                        # –ú–Ω–µ –¥–æ–ª–∂–Ω—ã
                        total_owed += converted_amount
                        open_count += 1

            # –°—á–∏—Ç–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –¥–æ–ª–≥–∏ –∑–∞ –º–µ—Å—è—Ü (closed=True –∏ date –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ)
            current_month_str = now.strftime('%Y-%m')
            async with get_db() as session:
                result_closed = await session.execute(
                    select(func.count(Debt.id)).where(
                        and_(
                            Debt.user_id == user_id,
                            Debt.is_active.is_(True),
                            Debt.closed.is_(True),
                            Debt.date.like(f"{current_month_str}%")
                        )
                    )
                )
                closed_this_month = result_closed.scalar() or 0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è = –º–Ω–µ –¥–æ–ª–∂–Ω—ã –±–æ–ª—å—à–µ)
            difference = total_owed - total_owe
            sign = "+" if difference >= 0 else ""

            return {
                'total_owe': round(total_owe, 2),
                'total_owed': round(total_owed, 2),
                'difference': round(difference, 2),
                'sign': sign,
                'closed_count': closed_this_month,
                'remaining_count': open_count,
                'currency': target_currency,
                'month': now.month
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

    @staticmethod
    async def _convert_to_target(amount: float, from_currency: str,
                                 to_currency: str, rates: Dict) -> Optional[float]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é —á–µ—Ä–µ–∑ UZS

        Args:
            amount: –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            from_currency: –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
            to_currency: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
            rates: –°–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç

        Returns:
            –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ None
        """
        try:
            if from_currency == to_currency:
                return amount

            if from_currency not in rates or to_currency not in rates:
                print(f"‚ö†Ô∏è –í–∞–ª—é—Ç–∞ {from_currency} –∏–ª–∏ {to_currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—É—Ä—Å–∞—Ö")
                return None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ UZS –∫–∞–∫ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ UZS
            uzs_amount = amount * rates[from_currency]

            # –ó–∞—Ç–µ–º –∏–∑ UZS –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
            result = uzs_amount / rates[to_currency]

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {from_currency} -> {to_currency}: {e}")
            return None

    @staticmethod
    async def format_statistics_message(user_id: int, target_currency: str = "USD") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_currency: –í–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await get_user_data(user_id)
            lang = user_data.get('lang', 'ru')

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await StatisticsService.calculate_statistics(user_id, target_currency)

            if not stats:
                return await tr(user_id, 'statistics_error')

            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
            currency_symbols = {
                'USD': '$',
                'EUR': '‚Ç¨',
                'UZS': 'UZS'
            }
            symbol = currency_symbols.get(target_currency, target_currency)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            month_name = await get_month_name(stats['month'], lang)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã
            if target_currency == 'UZS':
                owe_str = f"{stats['total_owe']:,.0f} {symbol}"
                owed_str = f"{stats['total_owed']:,.0f} {symbol}"
                diff_str = f"{stats['sign']}{abs(stats['difference']):,.0f} {symbol}"
            else:
                owe_str = f"{symbol}{stats['total_owe']:,.2f}"
                owed_str = f"{symbol}{stats['total_owed']:,.2f}"
                diff_str = f"{stats['sign']}{symbol}{abs(stats['difference']):,.2f}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""üìä {await tr(user_id, 'statistics_title')}

 {await tr(user_id, 'statistics_debts')}: {owe_str}
 {await tr(user_id, 'statistics_loans')}: {owed_str}
 {await tr(user_id, 'statistics_difference')}: {diff_str}

 {await tr(user_id, 'statistics_month', month=month_name)}:
 {await tr(user_id, 'statistics_closed')}: {stats['closed_count']}
 {await tr(user_id, 'statistics_remaining')}: {stats['remaining_count']}

 {await tr(user_id, 'statistics_currency')}: {target_currency}"""

            return message

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return await tr(user_id, 'statistics_format_error')


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@router.callback_query(F.data == CallbackData.STATISTICS)
async def show_statistics(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ USD
    stats_text = await StatisticsService.format_statistics_message(user_id, "USD")
    keyboard = await get_statistics_keyboard(user_id, current_currency="USD")

    await safe_edit_message(
        callback,
        stats_text,
        reply_markup=keyboard
    )

    await callback.answer()


@router.callback_query(F.data.startswith("stats_currency_"))
async def callback_change_currency(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    –§–æ—Ä–º–∞—Ç callback_data: stats_currency_USD / stats_currency_EUR / stats_currency_UZS
    """
    user_id = callback.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ callback_data
    currency = callback.data.split("_")[-1]  # USD, EUR –∏–ª–∏ UZS

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤–∞–ª—é—Ç–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
    current_text = callback.message.text
    if f"üåç –í–∞–ª—é—Ç–∞: {currency}" in current_text or f"–í–∞–ª—é—Ç–∞: {currency}" in current_text:
        await callback.answer()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π
    stats_text = await StatisticsService.format_statistics_message(user_id, currency)
    keyboard = await get_statistics_keyboard(user_id, current_currency=currency)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_edit_message(
        callback,
        stats_text,
        reply_markup=keyboard
    )

    await callback.answer()

@router.callback_query(F.data == "stats_export_excel")
async def callback_export_excel(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
    –ó–î–ï–°–¨ –ü–û–î–ö–õ–Æ–ß–ò–®–¨ –°–í–û–Æ –õ–û–ì–ò–ö–£ –≠–ö–°–ü–û–†–¢–ê
    """
    user_id = callback.from_user.id
    await callback.answer(
        await tr(user_id, "statistics_export_placeholder"),
        show_alert=True
    )

    # –¢–≤–æ–π –∫–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∏–º:
    # excel_file = await generate_excel_report(user_id)
    # await callback.message.answer_document(excel_file)





# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –î–†–£–ì–ò–• –ú–û–î–£–õ–Ø–• ====================

async def get_statistics(user_id: int, currency: str = "USD") -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å)"""
    return await StatisticsService.calculate_statistics(user_id, currency)


async def format_stats_message(user_id: int, currency: str = "USD") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å)"""
    return await StatisticsService.format_statistics_message(user_id, currency)